function noop() { }
function run(fn) {
    return fn();
}
function blank_object() {
    return Object.create(null);
}
function run_all(fns) {
    fns.forEach(run);
}
function is_function(thing) {
    return typeof thing === 'function';
}
function safe_not_equal(a, b) {
    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
}
function is_empty(obj) {
    return Object.keys(obj).length === 0;
}
function null_to_empty(value) {
    return value == null ? '' : value;
}

function append(target, node) {
    target.appendChild(node);
}
function insert(target, node, anchor) {
    target.insertBefore(node, anchor || null);
}
function detach(node) {
    node.parentNode.removeChild(node);
}
function element(name) {
    return document.createElement(name);
}
function text(data) {
    return document.createTextNode(data);
}
function space() {
    return text(' ');
}
function empty() {
    return text('');
}
function listen(node, event, handler, options) {
    node.addEventListener(event, handler, options);
    return () => node.removeEventListener(event, handler, options);
}
function attr(node, attribute, value) {
    if (value == null)
        node.removeAttribute(attribute);
    else if (node.getAttribute(attribute) !== value)
        node.setAttribute(attribute, value);
}
function children(element) {
    return Array.from(element.childNodes);
}
function set_style(node, key, value, important) {
    node.style.setProperty(key, value, important ? 'important' : '');
}
function toggle_class(element, name, toggle) {
    element.classList[toggle ? 'add' : 'remove'](name);
}
function custom_event(type, detail) {
    const e = document.createEvent('CustomEvent');
    e.initCustomEvent(type, false, false, detail);
    return e;
}

let current_component;
function set_current_component(component) {
    current_component = component;
}
function get_current_component() {
    if (!current_component)
        throw new Error(`Function called outside component initialization`);
    return current_component;
}
function onMount(fn) {
    get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
    get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
    const component = get_current_component();
    return (type, detail) => {
        const callbacks = component.$$.callbacks[type];
        if (callbacks) {
            // TODO are there situations where events could be dispatched
            // in a server (non-DOM) environment?
            const event = custom_event(type, detail);
            callbacks.slice().forEach(fn => {
                fn.call(component, event);
            });
        }
    };
}

const dirty_components = [];
const binding_callbacks = [];
const render_callbacks = [];
const flush_callbacks = [];
const resolved_promise = Promise.resolve();
let update_scheduled = false;
function schedule_update() {
    if (!update_scheduled) {
        update_scheduled = true;
        resolved_promise.then(flush);
    }
}
function add_render_callback(fn) {
    render_callbacks.push(fn);
}
function add_flush_callback(fn) {
    flush_callbacks.push(fn);
}
let flushing = false;
const seen_callbacks = new Set();
function flush() {
    if (flushing)
        return;
    flushing = true;
    do {
        // first, call beforeUpdate functions
        // and update components
        for (let i = 0; i < dirty_components.length; i += 1) {
            const component = dirty_components[i];
            set_current_component(component);
            update(component.$$);
        }
        set_current_component(null);
        dirty_components.length = 0;
        while (binding_callbacks.length)
            binding_callbacks.pop()();
        // then, once components are updated, call
        // afterUpdate functions. This may cause
        // subsequent updates...
        for (let i = 0; i < render_callbacks.length; i += 1) {
            const callback = render_callbacks[i];
            if (!seen_callbacks.has(callback)) {
                // ...so guard against infinite loops
                seen_callbacks.add(callback);
                callback();
            }
        }
        render_callbacks.length = 0;
    } while (dirty_components.length);
    while (flush_callbacks.length) {
        flush_callbacks.pop()();
    }
    update_scheduled = false;
    flushing = false;
    seen_callbacks.clear();
}
function update($$) {
    if ($$.fragment !== null) {
        $$.update();
        run_all($$.before_update);
        const dirty = $$.dirty;
        $$.dirty = [-1];
        $$.fragment && $$.fragment.p($$.ctx, dirty);
        $$.after_update.forEach(add_render_callback);
    }
}
const outroing = new Set();
let outros;
function group_outros() {
    outros = {
        r: 0,
        c: [],
        p: outros // parent group
    };
}
function check_outros() {
    if (!outros.r) {
        run_all(outros.c);
    }
    outros = outros.p;
}
function transition_in(block, local) {
    if (block && block.i) {
        outroing.delete(block);
        block.i(local);
    }
}
function transition_out(block, local, detach, callback) {
    if (block && block.o) {
        if (outroing.has(block))
            return;
        outroing.add(block);
        outros.c.push(() => {
            outroing.delete(block);
            if (callback) {
                if (detach)
                    block.d(1);
                callback();
            }
        });
        block.o(local);
    }
}

const globals = (typeof window !== 'undefined'
    ? window
    : typeof globalThis !== 'undefined'
        ? globalThis
        : global);

function bind(component, name, callback) {
    const index = component.$$.props[name];
    if (index !== undefined) {
        component.$$.bound[index] = callback;
        callback(component.$$.ctx[index]);
    }
}
function create_component(block) {
    block && block.c();
}
function mount_component(component, target, anchor) {
    const { fragment, on_mount, on_destroy, after_update } = component.$$;
    fragment && fragment.m(target, anchor);
    // onMount happens before the initial afterUpdate
    add_render_callback(() => {
        const new_on_destroy = on_mount.map(run).filter(is_function);
        if (on_destroy) {
            on_destroy.push(...new_on_destroy);
        }
        else {
            // Edge case - component was destroyed immediately,
            // most likely as a result of a binding initialising
            run_all(new_on_destroy);
        }
        component.$$.on_mount = [];
    });
    after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
    const $$ = component.$$;
    if ($$.fragment !== null) {
        run_all($$.on_destroy);
        $$.fragment && $$.fragment.d(detaching);
        // TODO null out other refs, including component.$$ (but need to
        // preserve final state?)
        $$.on_destroy = $$.fragment = null;
        $$.ctx = [];
    }
}
function make_dirty(component, i) {
    if (component.$$.dirty[0] === -1) {
        dirty_components.push(component);
        schedule_update();
        component.$$.dirty.fill(0);
    }
    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
}
function init(component, options, instance, create_fragment, not_equal, props, dirty = [-1]) {
    const parent_component = current_component;
    set_current_component(component);
    const prop_values = options.props || {};
    const $$ = component.$$ = {
        fragment: null,
        ctx: null,
        // state
        props,
        update: noop,
        not_equal,
        bound: blank_object(),
        // lifecycle
        on_mount: [],
        on_destroy: [],
        before_update: [],
        after_update: [],
        context: new Map(parent_component ? parent_component.$$.context : []),
        // everything else
        callbacks: blank_object(),
        dirty,
        skip_bound: false
    };
    let ready = false;
    $$.ctx = instance
        ? instance(component, prop_values, (i, ret, ...rest) => {
            const value = rest.length ? rest[0] : ret;
            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                if (!$$.skip_bound && $$.bound[i])
                    $$.bound[i](value);
                if (ready)
                    make_dirty(component, i);
            }
            return ret;
        })
        : [];
    $$.update();
    ready = true;
    run_all($$.before_update);
    // `false` as a special case of no DOM component
    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
    if (options.target) {
        if (options.hydrate) {
            const nodes = children(options.target);
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.l(nodes);
            nodes.forEach(detach);
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            $$.fragment && $$.fragment.c();
        }
        if (options.intro)
            transition_in(component.$$.fragment);
        mount_component(component, options.target, options.anchor);
        flush();
    }
    set_current_component(parent_component);
}
class SvelteComponent {
    $destroy() {
        destroy_component(this, 1);
        this.$destroy = noop;
    }
    $on(type, callback) {
        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
        callbacks.push(callback);
        return () => {
            const index = callbacks.indexOf(callback);
            if (index !== -1)
                callbacks.splice(index, 1);
        };
    }
    $set($$props) {
        if (this.$$set && !is_empty($$props)) {
            this.$$.skip_bound = true;
            this.$$set($$props);
            this.$$.skip_bound = false;
        }
    }
}

/**
 * Watching elem's size changes. If something
 * is changed, calling callback function.
 * Returns unsubscribe method (watch stopper).
 *
 * MODERN: via ResizeObserver
 * LEGACY: via requestAnimationFrame
 *
 * @param elem
 * @param callback
 * @returns {unsubscribe}
 */
function createObserver(elem, callback) {
  const trueObserverSupported = typeof window.ResizeObserver !== 'undefined';
  let unsubscribe;

  if (trueObserverSupported) {
    const ro = new ResizeObserver((entries) => {
      for (const entry of entries) {
        callback();
      }
    });
    ro.observe(elem);
    unsubscribe = () => {
      ro.unobserve(elem);
      ro.disconnect();
    };
  } else {
    let lastHeight = null;
    let frameRequester;

    function getElemOffsetHeight() {
      const height = elem.offsetHeight;
      if (lastHeight !== null && lastHeight !== height) {
        callback();
      }
      lastHeight = height;
      frameRequester = requestAnimationFrame(getElemOffsetHeight);
    }

    frameRequester = requestAnimationFrame(getElemOffsetHeight);
    unsubscribe = () => {
      cancelAnimationFrame(frameRequester);
    };
  }

  return unsubscribe;
}

/* src/Thumb.svelte generated by Svelte v3.28.0 */

const { document: document_1 } = globals;

function add_css() {
	var style = element("style");
	style.id = "svelte-1f9qc2h-style";
	style.textContent = ".scrollbar-thumb.svelte-1f9qc2h{background-color:#7cb86f;width:13px;border-radius:5px;cursor:pointer}.happy-scroll-thumb.svelte-1f9qc2h{position:absolute;z-index:21;display:block}.happy-scroll-thumb.no-scroll.svelte-1f9qc2h{display:none}.happy-scroll-thumb.smooth.svelte-1f9qc2h{transition:top 0.2s ease}";
	append(document_1.head, style);
}

function create_fragment(ctx) {
	let div;
	let div_class_value;

	return {
		c() {
			div = element("div");
			set_style(div, "height", /*thumbHeight*/ ctx[3]);
			set_style(div, "top", /*thumbTop*/ ctx[4]);
			attr(div, "class", div_class_value = "" + (null_to_empty(/*className*/ ctx[0]) + " svelte-1f9qc2h"));
			toggle_class(div, "happy-scroll-thumb", true);
			toggle_class(div, "no-scroll", /*noScroll*/ ctx[5]);
			toggle_class(div, "smooth", /*smooth*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[13](div);
		},
		p(ctx, [dirty]) {
			if (dirty & /*thumbHeight*/ 8) {
				set_style(div, "height", /*thumbHeight*/ ctx[3]);
			}

			if (dirty & /*thumbTop*/ 16) {
				set_style(div, "top", /*thumbTop*/ ctx[4]);
			}

			if (dirty & /*className*/ 1 && div_class_value !== (div_class_value = "" + (null_to_empty(/*className*/ ctx[0]) + " svelte-1f9qc2h"))) {
				attr(div, "class", div_class_value);
			}

			if (dirty & /*className*/ 1) {
				toggle_class(div, "happy-scroll-thumb", true);
			}

			if (dirty & /*className, noScroll*/ 33) {
				toggle_class(div, "no-scroll", /*noScroll*/ ctx[5]);
			}

			if (dirty & /*className, smooth*/ 3) {
				toggle_class(div, "smooth", /*smooth*/ ctx[1]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[13](null);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { className = "scrollbar-thumb" } = $$props;
	let { wrapperElem = null } = $$props;
	let { observerTarget = null } = $$props;
	let { smooth = false } = $$props;
	let { trackElem = null } = $$props;
	let { pressingUp = false } = $$props;
	let { pressingDown = false } = $$props;
	let { buttonPressingMove = 5 } = $$props;
	let { showArrows } = $$props;
	const dispatch = createEventDispatcher();
	const heightReducer = showArrows ? 40 : 0;
	let thumbElem;
	let thumbHeight = "0px";
	let thumbTop = "0px";
	let noScroll = true;
	let pos = { top: 0, y: 0 };
	let unsubscribeObserver;

	/**
 * Calculating and setting new Height and Top of thumb
 */
	function calcThumbHeight() {
		const maxHeight = wrapperElem.scrollHeight - heightReducer;
		const visibleArea = wrapperElem.offsetHeight - heightReducer;
		const currentScrolled = wrapperElem.scrollTop;
		const visiblePercent = visibleArea / maxHeight * 100;
		const scrolledPercent = currentScrolled / maxHeight * 100;
		$$invalidate(4, thumbTop = visibleArea / 100 * scrolledPercent + "px");
		$$invalidate(3, thumbHeight = visiblePercent + "%");
		$$invalidate(5, noScroll = thumbHeight === "100%");
	}

	/**
 * Common handler for "touchmove" and "mousemove"
 * @param {MouseEvent|TouchEvent} e
 */
	function thumbInteractionHappening(e) {
		e.preventDefault();
		e.stopPropagation();

		const clientY = e.type === "touchmove"
		? e.changedTouches[0].clientY
		: e.clientY;

		const dy = clientY - pos.y;
		$$invalidate(6, wrapperElem.scrollTop = pos.top + dy, wrapperElem);
	}

	/**
 * Common handler for "touchend" and "mouseup"
 */
	function thumbInteractionEnd() {
		setTimeout(() => {
			dispatch("unlock-click");
		});

		document.body.style.userSelect = "inherit";
		document.removeEventListener("mousemove", thumbInteractionHappening);
		document.removeEventListener("mouseup", thumbInteractionEnd);
		document.removeEventListener("touchmove", thumbInteractionHappening);
		document.removeEventListener("touchend", thumbInteractionEnd);
	}

	/**
 * Common handler from "touchstart" and "mousedown
 * @param {MouseEvent|TouchEvent} e
 */
	function thumbInteractionStart(e) {
		dispatch("lock-click");
		e.preventDefault();
		e.stopPropagation();

		pos = {
			top: wrapperElem.scrollTop,
			y: e.type === "touchstart"
			? e.changedTouches[0].clientY
			: e.clientY
		};

		document.body.style.userSelect = "none";

		if (e.type === "touchstart") {
			document.addEventListener("touchmove", thumbInteractionHappening);
			document.addEventListener("touchend", thumbInteractionEnd);
		} else {
			document.addEventListener("mousemove", thumbInteractionHappening);
			document.addEventListener("mouseup", thumbInteractionEnd);
		}
	}

	/**
 * Setting position and size for
 * track element
 */
	function initTrackBar() {
		$$invalidate(7, trackElem.style.top = wrapperElem.offsetTop + heightReducer / 2 + "px", trackElem);
		$$invalidate(7, trackElem.style.height = wrapperElem.offsetHeight - heightReducer + "px", trackElem);
	}

	onMount(() => {
		initTrackBar();
		thumbElem.addEventListener("mousedown", thumbInteractionStart);
		thumbElem.addEventListener("touchstart", thumbInteractionStart);
		wrapperElem.addEventListener("scroll", calcThumbHeight);
		window.addEventListener("resize", initTrackBar);

		let observerElem = observerTarget.$$
		? observerTarget.happyObserverTarget()
		: observerTarget;

		unsubscribeObserver = createObserver(observerElem, () => calcThumbHeight());
	});

	onDestroy(() => {
		thumbElem.removeEventListener("mousedown", thumbInteractionStart);
		thumbElem.removeEventListener("touchstart", thumbInteractionStart);
		window.removeEventListener("resize", initTrackBar);
		unsubscribeObserver();
	});

	function buttonScrollDown(pressing) {
		if (!pressing) return;

		requestAnimationFrame(() => {
			$$invalidate(6, wrapperElem.scrollTop += buttonPressingMove, wrapperElem);
			buttonScrollDown(pressingDown);
		});
	}

	function buttonScrollUp(pressing) {
		if (!pressing) return;

		requestAnimationFrame(() => {
			$$invalidate(6, wrapperElem.scrollTop -= buttonPressingMove, wrapperElem);
			buttonScrollUp(pressingUp);
		});
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			thumbElem = $$value;
			$$invalidate(2, thumbElem);
		});
	}

	$$self.$$set = $$props => {
		if ("className" in $$props) $$invalidate(0, className = $$props.className);
		if ("wrapperElem" in $$props) $$invalidate(6, wrapperElem = $$props.wrapperElem);
		if ("observerTarget" in $$props) $$invalidate(8, observerTarget = $$props.observerTarget);
		if ("smooth" in $$props) $$invalidate(1, smooth = $$props.smooth);
		if ("trackElem" in $$props) $$invalidate(7, trackElem = $$props.trackElem);
		if ("pressingUp" in $$props) $$invalidate(9, pressingUp = $$props.pressingUp);
		if ("pressingDown" in $$props) $$invalidate(10, pressingDown = $$props.pressingDown);
		if ("buttonPressingMove" in $$props) $$invalidate(11, buttonPressingMove = $$props.buttonPressingMove);
		if ("showArrows" in $$props) $$invalidate(12, showArrows = $$props.showArrows);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*pressingUp*/ 512) {
			 buttonScrollUp(pressingUp);
		}

		if ($$self.$$.dirty & /*pressingDown*/ 1024) {
			 buttonScrollDown(pressingDown);
		}
	};

	return [
		className,
		smooth,
		thumbElem,
		thumbHeight,
		thumbTop,
		noScroll,
		wrapperElem,
		trackElem,
		observerTarget,
		pressingUp,
		pressingDown,
		buttonPressingMove,
		showArrows,
		div_binding
	];
}

class Thumb extends SvelteComponent {
	constructor(options) {
		super();
		if (!document_1.getElementById("svelte-1f9qc2h-style")) add_css();

		init(this, options, instance, create_fragment, safe_not_equal, {
			className: 0,
			wrapperElem: 6,
			observerTarget: 8,
			smooth: 1,
			trackElem: 7,
			pressingUp: 9,
			pressingDown: 10,
			buttonPressingMove: 11,
			showArrows: 12
		});
	}
}

/* src/ScrollButton.svelte generated by Svelte v3.28.0 */

const { document: document_1$1 } = globals;

function add_css$1() {
	var style = element("style");
	style.id = "svelte-an71hn-style";
	style.textContent = ".scroll-button.svelte-an71hn{width:0;height:0;border-style:solid;position:relative;left:50%;transform:translateX(-50%);cursor:pointer}.scroll-button.up.svelte-an71hn{top:-20px;border-width:0 7.5px 10px 7.5px;border-color:transparent transparent #909091 transparent;line-height:0px;_border-color:#000000 #000000 #909091 #000000;_filter:progid:DXImageTransform.Microsoft.Chroma(color='#000000')}.scroll-button.down.svelte-an71hn{top:100%;border-width:10px 7.5px 0 7.5px;border-color:#909091 transparent transparent transparent;line-height:0px;_border-color:#909091 #000000 #000000 #000000;_filter:progid:DXImageTransform.Microsoft.Chroma(color='#000000')}";
	append(document_1$1.head, style);
}

function create_fragment$1(ctx) {
	let div;
	let div_class_value;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = "scroll-button " + /*direction*/ ctx[0] + " svelte-an71hn");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			/*div_binding*/ ctx[4](div);

			if (!mounted) {
				dispose = [
					listen(div, "click", click),
					listen(div, "mousedown", /*startPressing*/ ctx[2]),
					listen(div, "touchstart", /*startPressing*/ ctx[2], { passive: true })
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*direction*/ 1 && div_class_value !== (div_class_value = "scroll-button " + /*direction*/ ctx[0] + " svelte-an71hn")) {
				attr(div, "class", div_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			/*div_binding*/ ctx[4](null);
			mounted = false;
			run_all(dispose);
		}
	};
}

function click(evt) {
	evt.preventDefault();
	evt.stopPropagation();
}

function instance$1($$self, $$props, $$invalidate) {
	let { direction = "up" } = $$props;
	let { pressing = false } = $$props;
	let button;

	function stopPressing() {
		$$invalidate(3, pressing = false);
		document.removeEventListener("mouseup", stopPressing);
		document.removeEventListener("touchend", stopPressing);
	}

	function startPressing() {
		$$invalidate(3, pressing = true);
		document.addEventListener("mouseup", stopPressing);
		document.addEventListener("touchend", stopPressing);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			button = $$value;
			$$invalidate(1, button);
		});
	}

	$$self.$$set = $$props => {
		if ("direction" in $$props) $$invalidate(0, direction = $$props.direction);
		if ("pressing" in $$props) $$invalidate(3, pressing = $$props.pressing);
	};

	return [direction, button, startPressing, pressing, div_binding];
}

class ScrollButton extends SvelteComponent {
	constructor(options) {
		super();
		if (!document_1$1.getElementById("svelte-an71hn-style")) add_css$1();
		init(this, options, instance$1, create_fragment$1, safe_not_equal, { direction: 0, pressing: 3 });
	}
}

/* src/Track.svelte generated by Svelte v3.28.0 */

function add_css$2() {
	var style = element("style");
	style.id = "svelte-8ilrm9-style";
	style.textContent = ".happy-scroll-track.svelte-8ilrm9{position:absolute;z-index:20}.scrollbar-track.svelte-8ilrm9{right:0px;width:13px;border-radius:5px;box-shadow:0 0 0 4px #dbdbdb;background-color:#dbdbdb}";
	append(document.head, style);
}

// (37:0) {#if wrapperElem}
function create_if_block(ctx) {
	let div;
	let div_class_value;
	let current;
	let mounted;
	let dispose;
	let if_block = /*trackElem*/ ctx[5] && create_if_block_1(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			attr(div, "class", div_class_value = "" + (null_to_empty(/*className*/ ctx[1]) + " svelte-8ilrm9"));
			toggle_class(div, "happy-scroll-track", true);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			/*div_binding*/ ctx[15](div);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*clickTrack*/ ctx[10]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (/*trackElem*/ ctx[5]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*trackElem*/ 32) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(div, null);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}

			if (!current || dirty & /*className*/ 2 && div_class_value !== (div_class_value = "" + (null_to_empty(/*className*/ ctx[1]) + " svelte-8ilrm9"))) {
				attr(div, "class", div_class_value);
			}

			if (dirty & /*className*/ 2) {
				toggle_class(div, "happy-scroll-track", true);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
			/*div_binding*/ ctx[15](null);
			mounted = false;
			dispose();
		}
	};
}

// (39:4) {#if trackElem}
function create_if_block_1(ctx) {
	let t0;
	let thumb;
	let t1;
	let if_block1_anchor;
	let current;
	let if_block0 = /*showArrows*/ ctx[4] && create_if_block_3(ctx);

	thumb = new Thumb({
			props: {
				wrapperElem: /*wrapperElem*/ ctx[0],
				trackElem: /*trackElem*/ ctx[5],
				observerTarget: /*observerTarget*/ ctx[2],
				smooth: /*smooth*/ ctx[7],
				pressingUp: /*pressingUp*/ ctx[8],
				pressingDown: /*pressingDown*/ ctx[9],
				buttonPressingMove: /*buttonPressingMove*/ ctx[3],
				showArrows: /*showArrows*/ ctx[4]
			}
		});

	thumb.$on("lock-click", /*lock_click_handler*/ ctx[12]);
	thumb.$on("unlock-click", /*unlock_click_handler*/ ctx[13]);
	let if_block1 = /*showArrows*/ ctx[4] && create_if_block_2(ctx);

	return {
		c() {
			if (if_block0) if_block0.c();
			t0 = space();
			create_component(thumb.$$.fragment);
			t1 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
		},
		m(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert(target, t0, anchor);
			mount_component(thumb, target, anchor);
			insert(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);
			current = true;
		},
		p(ctx, dirty) {
			if (/*showArrows*/ ctx[4]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty & /*showArrows*/ 16) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			const thumb_changes = {};
			if (dirty & /*wrapperElem*/ 1) thumb_changes.wrapperElem = /*wrapperElem*/ ctx[0];
			if (dirty & /*trackElem*/ 32) thumb_changes.trackElem = /*trackElem*/ ctx[5];
			if (dirty & /*observerTarget*/ 4) thumb_changes.observerTarget = /*observerTarget*/ ctx[2];
			if (dirty & /*smooth*/ 128) thumb_changes.smooth = /*smooth*/ ctx[7];
			if (dirty & /*pressingUp*/ 256) thumb_changes.pressingUp = /*pressingUp*/ ctx[8];
			if (dirty & /*pressingDown*/ 512) thumb_changes.pressingDown = /*pressingDown*/ ctx[9];
			if (dirty & /*buttonPressingMove*/ 8) thumb_changes.buttonPressingMove = /*buttonPressingMove*/ ctx[3];
			if (dirty & /*showArrows*/ 16) thumb_changes.showArrows = /*showArrows*/ ctx[4];
			thumb.$set(thumb_changes);

			if (/*showArrows*/ ctx[4]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty & /*showArrows*/ 16) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(thumb.$$.fragment, local);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(thumb.$$.fragment, local);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach(t0);
			destroy_component(thumb, detaching);
			if (detaching) detach(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
		}
	};
}

// (40:6) {#if showArrows}
function create_if_block_3(ctx) {
	let scrollbutton;
	let updating_pressing;
	let current;

	function scrollbutton_pressing_binding(value) {
		/*scrollbutton_pressing_binding*/ ctx[11].call(null, value);
	}

	let scrollbutton_props = { direction: "up" };

	if (/*pressingUp*/ ctx[8] !== void 0) {
		scrollbutton_props.pressing = /*pressingUp*/ ctx[8];
	}

	scrollbutton = new ScrollButton({ props: scrollbutton_props });
	binding_callbacks.push(() => bind(scrollbutton, "pressing", scrollbutton_pressing_binding));

	return {
		c() {
			create_component(scrollbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(scrollbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const scrollbutton_changes = {};

			if (!updating_pressing && dirty & /*pressingUp*/ 256) {
				updating_pressing = true;
				scrollbutton_changes.pressing = /*pressingUp*/ ctx[8];
				add_flush_callback(() => updating_pressing = false);
			}

			scrollbutton.$set(scrollbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(scrollbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(scrollbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(scrollbutton, detaching);
		}
	};
}

// (55:6) {#if showArrows}
function create_if_block_2(ctx) {
	let scrollbutton;
	let updating_pressing;
	let current;

	function scrollbutton_pressing_binding_1(value) {
		/*scrollbutton_pressing_binding_1*/ ctx[14].call(null, value);
	}

	let scrollbutton_props = { direction: "down" };

	if (/*pressingDown*/ ctx[9] !== void 0) {
		scrollbutton_props.pressing = /*pressingDown*/ ctx[9];
	}

	scrollbutton = new ScrollButton({ props: scrollbutton_props });
	binding_callbacks.push(() => bind(scrollbutton, "pressing", scrollbutton_pressing_binding_1));

	return {
		c() {
			create_component(scrollbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(scrollbutton, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const scrollbutton_changes = {};

			if (!updating_pressing && dirty & /*pressingDown*/ 512) {
				updating_pressing = true;
				scrollbutton_changes.pressing = /*pressingDown*/ ctx[9];
				add_flush_callback(() => updating_pressing = false);
			}

			scrollbutton.$set(scrollbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(scrollbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(scrollbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(scrollbutton, detaching);
		}
	};
}

function create_fragment$2(ctx) {
	let if_block_anchor;
	let current;
	let if_block = /*wrapperElem*/ ctx[0] && create_if_block(ctx);

	return {
		c() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			if (/*wrapperElem*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*wrapperElem*/ 1) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance$2($$self, $$props, $$invalidate) {
	let { className = "scrollbar-track" } = $$props;
	let { wrapperElem = null } = $$props;
	let { observerTarget = null } = $$props;
	let { buttonPressingMove = 5 } = $$props;
	let { showArrows } = $$props;
	let trackElem;
	let clickLock = false;
	let smooth = false;
	let pressingUp = false;
	let pressingDown = false;

	/**
 * Scrolling area when clicking on
 * scrollbar track
 *
 * @param {MouseEvent} event
 */
	function clickTrack(event) {
		if (clickLock) return;
		$$invalidate(7, smooth = true);
		event.preventDefault();
		event.stopPropagation();
		const { offsetY } = event;
		const percents = offsetY / trackElem.offsetHeight * 100;
		$$invalidate(0, wrapperElem.scrollTop = wrapperElem.scrollHeight / 100 * percents, wrapperElem);

		setTimeout(
			() => {
				$$invalidate(7, smooth = false);
			},
			250
		);
	}

	function scrollbutton_pressing_binding(value) {
		pressingUp = value;
		$$invalidate(8, pressingUp);
	}

	const lock_click_handler = () => $$invalidate(6, clickLock = true);
	const unlock_click_handler = () => $$invalidate(6, clickLock = false);

	function scrollbutton_pressing_binding_1(value) {
		pressingDown = value;
		$$invalidate(9, pressingDown);
	}

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			trackElem = $$value;
			$$invalidate(5, trackElem);
		});
	}

	$$self.$$set = $$props => {
		if ("className" in $$props) $$invalidate(1, className = $$props.className);
		if ("wrapperElem" in $$props) $$invalidate(0, wrapperElem = $$props.wrapperElem);
		if ("observerTarget" in $$props) $$invalidate(2, observerTarget = $$props.observerTarget);
		if ("buttonPressingMove" in $$props) $$invalidate(3, buttonPressingMove = $$props.buttonPressingMove);
		if ("showArrows" in $$props) $$invalidate(4, showArrows = $$props.showArrows);
	};

	return [
		wrapperElem,
		className,
		observerTarget,
		buttonPressingMove,
		showArrows,
		trackElem,
		clickLock,
		smooth,
		pressingUp,
		pressingDown,
		clickTrack,
		scrollbutton_pressing_binding,
		lock_click_handler,
		unlock_click_handler,
		scrollbutton_pressing_binding_1,
		div_binding
	];
}

class Track extends SvelteComponent {
	constructor(options) {
		super();
		if (!document.getElementById("svelte-8ilrm9-style")) add_css$2();

		init(this, options, instance$2, create_fragment$2, safe_not_equal, {
			className: 1,
			wrapperElem: 0,
			observerTarget: 2,
			buttonPressingMove: 3,
			showArrows: 4
		});
	}
}

/* src/Scrollbar.svelte generated by Svelte v3.28.0 */

function create_fragment$3(ctx) {
	let track;
	let current;

	track = new Track({
			props: {
				wrapperElem: /*scrollArea*/ ctx[1],
				observerTarget: /*observerTarget*/ ctx[0],
				buttonPressingMove: /*buttonPressingMove*/ ctx[2],
				showArrows: /*showArrows*/ ctx[3]
			}
		});

	return {
		c() {
			create_component(track.$$.fragment);
		},
		m(target, anchor) {
			mount_component(track, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const track_changes = {};
			if (dirty & /*scrollArea*/ 2) track_changes.wrapperElem = /*scrollArea*/ ctx[1];
			if (dirty & /*observerTarget*/ 1) track_changes.observerTarget = /*observerTarget*/ ctx[0];
			if (dirty & /*buttonPressingMove*/ 4) track_changes.buttonPressingMove = /*buttonPressingMove*/ ctx[2];
			if (dirty & /*showArrows*/ 8) track_changes.showArrows = /*showArrows*/ ctx[3];
			track.$set(track_changes);
		},
		i(local) {
			if (current) return;
			transition_in(track.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(track.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(track, detaching);
		}
	};
}

function instance$3($$self, $$props, $$invalidate) {
	let { observerTarget } = $$props;
	let { scrollArea } = $$props;
	let { buttonPressingMove = 5 } = $$props;
	let { showArrows = false } = $$props;

	$$self.$$set = $$props => {
		if ("observerTarget" in $$props) $$invalidate(0, observerTarget = $$props.observerTarget);
		if ("scrollArea" in $$props) $$invalidate(1, scrollArea = $$props.scrollArea);
		if ("buttonPressingMove" in $$props) $$invalidate(2, buttonPressingMove = $$props.buttonPressingMove);
		if ("showArrows" in $$props) $$invalidate(3, showArrows = $$props.showArrows);
	};

	return [observerTarget, scrollArea, buttonPressingMove, showArrows];
}

class Scrollbar extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance$3, create_fragment$3, safe_not_equal, {
			observerTarget: 0,
			scrollArea: 1,
			buttonPressingMove: 2,
			showArrows: 3
		});
	}
}

export default Scrollbar;
