import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, c as claim_element, l as children, b as detach_dev, g as attr_dev, y as toggle_class, h as add_location, k as insert_dev, n as noop, u as null_to_empty, j as append_dev, r as validate_each_argument, a as space, t as text, z as svg_element, f as claim_space, m as claim_text, A as listen_dev, w as set_data_dev, B as transition_in, C as transition_out, D as check_outros, x as destroy_each, E as run_all, q as query_selector_all, p as empty, F as create_component, G as claim_component, I as mount_component, J as destroy_component, K as group_outros } from './client.6624941f.js';
import { t } from './snarkdown.es.257e5e6b.js';
import { g as gql, D as DefaultClient } from './bundle.esm.ce987c6b.js';

/* src/components/Lightbox.svelte generated by Svelte v3.35.0 */

const file$1 = "src/components/Lightbox.svelte";

// (15:4) {:else}
function create_else_block(ctx) {
	let img;
	let img_class_value;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", img_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-19297ry"));
			if (img.src !== (img_src_value = /*imageUrl*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*alternText*/ ctx[1]);
			add_location(img, file$1, 15, 4, 426);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*imgFullSize*/ 8 && img_class_value !== (img_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-19297ry"))) {
				attr_dev(img, "class", img_class_value);
			}

			if (dirty & /*imageUrl*/ 1 && img.src !== (img_src_value = /*imageUrl*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*alternText*/ 2) {
				attr_dev(img, "alt", /*alternText*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(15:4) {:else}",
		ctx
	});

	return block;
}

// (11:4) {#if imageUrl.match(regex)}
function create_if_block(ctx) {
	let video;
	let track;
	let video_class_value;
	let video_src_value;

	const block = {
		c: function create() {
			video = element("video");
			track = element("track");
			this.h();
		},
		l: function claim(nodes) {
			video = claim_element(nodes, "VIDEO", {
				class: true,
				poster: true,
				src: true,
				controls: true,
				type: true
			});

			var video_nodes = children(video);
			track = claim_element(video_nodes, "TRACK", { kind: true });
			video_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(track, "kind", "captions");
			add_location(track, file$1, 12, 8, 370);
			attr_dev(video, "class", video_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-19297ry"));
			attr_dev(video, "poster", /*videoPoster*/ ctx[4]);
			if (video.src !== (video_src_value = /*imageUrl*/ ctx[0])) attr_dev(video, "src", video_src_value);
			video.controls = true;
			attr_dev(video, "type", "video/mp4");
			add_location(video, file$1, 11, 4, 271);
		},
		m: function mount(target, anchor) {
			insert_dev(target, video, anchor);
			append_dev(video, track);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*imgFullSize*/ 8 && video_class_value !== (video_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-19297ry"))) {
				attr_dev(video, "class", video_class_value);
			}

			if (dirty & /*videoPoster*/ 16) {
				attr_dev(video, "poster", /*videoPoster*/ ctx[4]);
			}

			if (dirty & /*imageUrl*/ 1 && video.src !== (video_src_value = /*imageUrl*/ ctx[0])) {
				attr_dev(video, "src", video_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(video);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(11:4) {#if imageUrl.match(regex)}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let show_if;

	function select_block_type(ctx, dirty) {
		if (show_if == null || dirty & /*imageUrl*/ 1) show_if = !!/*imageUrl*/ ctx[0].match(/*regex*/ ctx[5]);
		if (show_if) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "mySlides svelte-19297ry");
			toggle_class(div, "show", /*imageShowing*/ ctx[2]);
			add_location(div, file$1, 9, 0, 186);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (dirty & /*imageShowing*/ 4) {
				toggle_class(div, "show", /*imageShowing*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Lightbox", slots, []);
	let { imageUrl } = $$props;
	let { alternText } = $$props;
	let { imageShowing } = $$props;
	let { imgFullSize } = $$props;
	let { videoPoster } = $$props;
	let regex = /.mp4$/;
	const writable_props = ["imageUrl", "alternText", "imageShowing", "imgFullSize", "videoPoster"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Lightbox> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("imageUrl" in $$props) $$invalidate(0, imageUrl = $$props.imageUrl);
		if ("alternText" in $$props) $$invalidate(1, alternText = $$props.alternText);
		if ("imageShowing" in $$props) $$invalidate(2, imageShowing = $$props.imageShowing);
		if ("imgFullSize" in $$props) $$invalidate(3, imgFullSize = $$props.imgFullSize);
		if ("videoPoster" in $$props) $$invalidate(4, videoPoster = $$props.videoPoster);
	};

	$$self.$capture_state = () => ({
		imageUrl,
		alternText,
		imageShowing,
		imgFullSize,
		videoPoster,
		regex
	});

	$$self.$inject_state = $$props => {
		if ("imageUrl" in $$props) $$invalidate(0, imageUrl = $$props.imageUrl);
		if ("alternText" in $$props) $$invalidate(1, alternText = $$props.alternText);
		if ("imageShowing" in $$props) $$invalidate(2, imageShowing = $$props.imageShowing);
		if ("imgFullSize" in $$props) $$invalidate(3, imgFullSize = $$props.imgFullSize);
		if ("videoPoster" in $$props) $$invalidate(4, videoPoster = $$props.videoPoster);
		if ("regex" in $$props) $$invalidate(5, regex = $$props.regex);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [imageUrl, alternText, imageShowing, imgFullSize, videoPoster, regex];
}

class Lightbox extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			imageUrl: 0,
			alternText: 1,
			imageShowing: 2,
			imgFullSize: 3,
			videoPoster: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Lightbox",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*imageUrl*/ ctx[0] === undefined && !("imageUrl" in props)) {
			console.warn("<Lightbox> was created without expected prop 'imageUrl'");
		}

		if (/*alternText*/ ctx[1] === undefined && !("alternText" in props)) {
			console.warn("<Lightbox> was created without expected prop 'alternText'");
		}

		if (/*imageShowing*/ ctx[2] === undefined && !("imageShowing" in props)) {
			console.warn("<Lightbox> was created without expected prop 'imageShowing'");
		}

		if (/*imgFullSize*/ ctx[3] === undefined && !("imgFullSize" in props)) {
			console.warn("<Lightbox> was created without expected prop 'imgFullSize'");
		}

		if (/*videoPoster*/ ctx[4] === undefined && !("videoPoster" in props)) {
			console.warn("<Lightbox> was created without expected prop 'videoPoster'");
		}
	}

	get imageUrl() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageUrl(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alternText() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alternText(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imageShowing() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageShowing(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imgFullSize() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imgFullSize(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get videoPoster() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set videoPoster(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/projet/[slug].svelte generated by Svelte v3.35.0 */
const file = "src/routes/projet/[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	return child_ctx;
}

// (81:10) {#each projet.projets as slug}
function create_each_block_3(ctx) {
	let a;
	let t_value = /*slug*/ ctx[19].titre + "";
	let t;
	let a_class_value;
	let a_href_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", {
				"sapper:prefetch": true,
				class: true,
				href: true
			});

			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "sapper:prefetch", "");
			attr_dev(a, "class", a_class_value = "link" + /*projet*/ ctx[16].id + " svelte-6allh2");
			attr_dev(a, "href", a_href_value = urlSlug + /*slug*/ ctx[19].Slug);
			add_location(a, file, 81, 12, 1795);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*firstImage*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projets*/ 1 && t_value !== (t_value = /*slug*/ ctx[19].titre + "")) set_data_dev(t, t_value);

			if (dirty & /*projets*/ 1 && a_class_value !== (a_class_value = "link" + /*projet*/ ctx[16].id + " svelte-6allh2")) {
				attr_dev(a, "class", a_class_value);
			}

			if (dirty & /*projets*/ 1 && a_href_value !== (a_href_value = urlSlug + /*slug*/ ctx[19].Slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(81:10) {#each projet.projets as slug}",
		ctx
	});

	return block;
}

// (80:8) {#each info.lien as projet}
function create_each_block_2(ctx) {
	let each_1_anchor;
	let each_value_3 = /*projet*/ ctx[16].projets;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projets, urlSlug, firstImage*/ 9) {
				each_value_3 = /*projet*/ ctx[16].projets;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(80:8) {#each info.lien as projet}",
		ctx
	});

	return block;
}

// (153:6) {#each info.galery as image, i}
function create_each_block_1(ctx) {
	let lightbox;
	let current;

	lightbox = new Lightbox({
			props: {
				imageUrl: urlpApi + /*image*/ ctx[13].url,
				imageShowing: /*i*/ ctx[15] + 1 === /*imageShowIndex*/ ctx[1],
				alternText: /*i*/ ctx[15],
				imgFullSize: "img-" + /*fullSize*/ ctx[2],
				videoPoster: urlpApi + /*info*/ ctx[10].cover.url
			},
			$$inline: true
		});

	lightbox.$on("click", /*click_handler*/ ctx[7]);
	lightbox.$on("click", /*click_handler_1*/ ctx[8]);

	const block = {
		c: function create() {
			create_component(lightbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(lightbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(lightbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const lightbox_changes = {};
			if (dirty & /*projets*/ 1) lightbox_changes.imageUrl = urlpApi + /*image*/ ctx[13].url;
			if (dirty & /*imageShowIndex*/ 2) lightbox_changes.imageShowing = /*i*/ ctx[15] + 1 === /*imageShowIndex*/ ctx[1];
			if (dirty & /*fullSize*/ 4) lightbox_changes.imgFullSize = "img-" + /*fullSize*/ ctx[2];
			if (dirty & /*projets*/ 1) lightbox_changes.videoPoster = urlpApi + /*info*/ ctx[10].cover.url;
			lightbox.$set(lightbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(lightbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(lightbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(lightbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(153:6) {#each info.galery as image, i}",
		ctx
	});

	return block;
}

// (77:2) {#each projets as info}
function create_each_block(ctx) {
	let div0;
	let nav;
	let t0;
	let h5;
	let t1;
	let t2;
	let h2;
	let t3_value = /*info*/ ctx[10].titre + "";
	let t3;
	let t4;
	let div1;
	let raw_value = t(/*info*/ ctx[10].description) + "";
	let t5;
	let div2;
	let t6;
	let svg;
	let g;
	let circle;
	let path0;
	let path1;
	let path2;
	let path3;
	let t7;
	let button0;
	let t8;
	let t9;
	let button1;
	let t10;
	let t11;
	let current;
	let mounted;
	let dispose;
	let each_value_2 = /*info*/ ctx[10].lien;
	validate_each_argument(each_value_2);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*info*/ ctx[10].galery;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div0 = element("div");
			nav = element("nav");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = space();
			h5 = element("h5");
			t1 = text("❮ Projet ❯");
			t2 = space();
			h2 = element("h2");
			t3 = text(t3_value);
			t4 = space();
			div1 = element("div");
			t5 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t6 = space();
			svg = svg_element("svg");
			g = svg_element("g");
			circle = svg_element("circle");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			t7 = space();
			button0 = element("button");
			t8 = text("❮");
			t9 = space();
			button1 = element("button");
			t10 = text("❯");
			t11 = space();
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			nav = claim_element(div0_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(nav_nodes);
			}

			t0 = claim_space(nav_nodes);
			h5 = claim_element(nav_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t1 = claim_text(h5_nodes, "❮ Projet ❯");
			h5_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			t2 = claim_space(div0_nodes);
			h2 = claim_element(div0_nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t3 = claim_text(h2_nodes, t3_value);
			h2_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div1_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			t6 = claim_space(div2_nodes);

			svg = claim_element(
				div2_nodes,
				"svg",
				{
					class: true,
					xmlns: true,
					width: true,
					height: true,
					viewBox: true
				},
				1
			);

			var svg_nodes = children(svg);
			g = claim_element(svg_nodes, "g", { id: true, transform: true }, 1);
			var g_nodes = children(g);

			circle = claim_element(
				g_nodes,
				"circle",
				{
					id: true,
					"data-name": true,
					cx: true,
					cy: true,
					r: true,
					transform: true,
					fill: true
				},
				1
			);

			children(circle).forEach(detach_dev);

			path0 = claim_element(
				g_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path0).forEach(detach_dev);

			path1 = claim_element(
				g_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path1).forEach(detach_dev);

			path2 = claim_element(
				g_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path2).forEach(detach_dev);

			path3 = claim_element(
				g_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path3).forEach(detach_dev);
			g_nodes.forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			t7 = claim_space(div2_nodes);
			button0 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t8 = claim_text(button0_nodes, "❮");
			button0_nodes.forEach(detach_dev);
			t9 = claim_space(div2_nodes);
			button1 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t10 = claim_text(button1_nodes, "❯");
			button1_nodes.forEach(detach_dev);
			t11 = claim_space(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "linkText svelte-6allh2");
			add_location(h5, file, 89, 8, 2015);
			attr_dev(nav, "class", "svelte-6allh2");
			add_location(nav, file, 78, 6, 1700);
			attr_dev(h2, "class", "svelte-6allh2");
			add_location(h2, file, 91, 6, 2085);
			attr_dev(div0, "class", "post-info svelte-6allh2");
			add_location(div0, file, 77, 4, 1670);
			attr_dev(div1, "class", "text svelte-6allh2");
			add_location(div1, file, 94, 4, 2129);
			attr_dev(circle, "id", "Ellipse_13");
			attr_dev(circle, "data-name", "Ellipse 13");
			attr_dev(circle, "cx", "20.5");
			attr_dev(circle, "cy", "20.5");
			attr_dev(circle, "r", "20.5");
			attr_dev(circle, "transform", "translate(-1.729 -2.178)");
			attr_dev(circle, "fill", "rgba(0,0,0,0.1)");
			add_location(circle, file, 174, 10, 5280);
			attr_dev(path0, "id", "Tracé_87");
			attr_dev(path0, "data-name", "Tracé 87");
			attr_dev(path0, "d", "M29.024,13.474l-2.232-2.439,6.781-6.583L29.024.031l-6.2,6.431L20,4.452v9.022Z");
			attr_dev(path0, "transform", "translate(1.696 3.031)");
			attr_dev(path0, "fill", "#e42ef5");
			add_location(path0, file, 183, 10, 5523);
			attr_dev(path1, "id", "Tracé_88");
			attr_dev(path1, "data-name", "Tracé 88");
			attr_dev(path1, "d", "M9.024,13.443,6.792,11l6.781-6.583L9.024,0l-6.2,6.431L0,4.421v9.022Z");
			attr_dev(path1, "transform", "translate(35.139 20.139) rotate(90)");
			attr_dev(path1, "fill", "#e42ef5");
			add_location(path1, file, 190, 10, 5779);
			attr_dev(path2, "id", "Tracé_89");
			attr_dev(path2, "data-name", "Tracé 89");
			attr_dev(path2, "d", "M9.024,13.443,6.792,11l6.781-6.583L9.024,0l-6.2,6.431L0,4.421v9.022Z");
			attr_dev(path2, "transform", "translate(16.422 33.712) rotate(180)");
			attr_dev(path2, "fill", "#e42ef5");
			add_location(path2, file, 197, 10, 6039);
			attr_dev(path3, "id", "Tracé_90");
			attr_dev(path3, "data-name", "Tracé 90");
			attr_dev(path3, "d", "M9.024,13.443,6.792,11l6.781-6.583L9.024,0l-6.2,6.431L0,4.421v9.022Z");
			attr_dev(path3, "transform", "translate(2.979 16.506) rotate(-90)");
			attr_dev(path3, "fill", "#e42ef5");
			add_location(path3, file, 204, 10, 6300);
			attr_dev(g, "id", "exit-fullscreen");
			attr_dev(g, "transform", "translate(1.729 2.178)");
			add_location(g, file, 173, 8, 5210);
			attr_dev(svg, "class", "btn-small-size svelte-6allh2");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "width", "41");
			attr_dev(svg, "height", "41");
			attr_dev(svg, "viewBox", "0 0 41 41");
			add_location(svg, file, 165, 6, 5007);
			attr_dev(button0, "class", "prev svelte-6allh2");
			add_location(button0, file, 213, 6, 6582);
			attr_dev(button1, "class", "next svelte-6allh2");
			add_location(button1, file, 214, 6, 6648);
			attr_dev(div2, "class", "galery svelte-6allh2");
			add_location(div2, file, 151, 4, 4597);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, nav);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(nav, null);
			}

			append_dev(nav, t0);
			append_dev(nav, h5);
			append_dev(h5, t1);
			append_dev(div0, t2);
			append_dev(div0, h2);
			append_dev(h2, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, div1, anchor);
			div1.innerHTML = raw_value;
			insert_dev(target, t5, anchor);
			insert_dev(target, div2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append_dev(div2, t6);
			append_dev(div2, svg);
			append_dev(svg, g);
			append_dev(g, circle);
			append_dev(g, path0);
			append_dev(g, path1);
			append_dev(g, path2);
			append_dev(g, path3);
			append_dev(div2, t7);
			append_dev(div2, button0);
			append_dev(button0, t8);
			append_dev(div2, t9);
			append_dev(div2, button1);
			append_dev(button1, t10);
			append_dev(div2, t11);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg, "click", /*click_handler_2*/ ctx[9], false, false, false),
					listen_dev(button0, "click", /*prevSlide*/ ctx[4], false, false, false),
					listen_dev(button1, "click", /*nextSlide*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projets, urlSlug, firstImage*/ 9) {
				each_value_2 = /*info*/ ctx[10].lien;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(nav, t0);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if ((!current || dirty & /*projets*/ 1) && t3_value !== (t3_value = /*info*/ ctx[10].titre + "")) set_data_dev(t3, t3_value);
			if ((!current || dirty & /*projets*/ 1) && raw_value !== (raw_value = t(/*info*/ ctx[10].description) + "")) div1.innerHTML = raw_value;
			if (dirty & /*urlpApi, projets, imageShowIndex, fullSize, posScrollFullSize*/ 71) {
				each_value_1 = /*info*/ ctx[10].galery;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div2, t6);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(77:2) {#each projets as info}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let t;
	let div;
	let div_class_value;
	let current;
	let each_value = /*projets*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			t = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1t0knqz\"]", document.head);
			head_nodes.forEach(detach_dev);
			t = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Projet";
			attr_dev(div, "class", div_class_value = "projet " + /*fullSize*/ ctx[2] + " svelte-6allh2");
			add_location(div, file, 75, 0, 1608);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*nextSlide, prevSlide, fullSize, projets, urlpApi, imageShowIndex, posScrollFullSize, snarkdown, urlSlug, firstImage*/ 127) {
				each_value = /*projets*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*fullSize*/ 4 && div_class_value !== (div_class_value = "projet " + /*fullSize*/ ctx[2] + " svelte-6allh2")) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const projetQuery = gql`
    query Projets($Slug: String!) {
      projets: projets(where: { Slug: $Slug }) {
        id
        titre
        description
        galery {
          id
          url
        }
        cover {
          url
        }
        lien {
          id
          projets {
            Slug
            titre
          }
        }
      }
    }
  `;

async function preload(page) {
	const client = new DefaultClient({
			uri: "https://www.grldfaure.xyz/graphql",
			fetch: this.fetch
		});

	const results = await client.query({
		query: projetQuery,
		variables: { Slug: page.params.slug }
	});

	return { projets: results.data.projets };
}

const urlpApi = "https://www.grldfaure.xyz";
const urlSlug = "projet/";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", slots, []);
	let { projets } = $$props;
	let imageShowIndex = 1;

	const firstImage = () => {
		$$invalidate(1, imageShowIndex = 1);
	};

	const prevSlide = () => {
		if (imageShowIndex === 1 || imageShowIndex > projets[0].galery.length) {
			$$invalidate(1, imageShowIndex = projets[0].galery.length);
		} else {
			$$invalidate(1, imageShowIndex -= 1);
		}
	};

	const nextSlide = () => {
		if (imageShowIndex === projets[0].galery.length) {
			$$invalidate(1, imageShowIndex = 1);
		} else {
			$$invalidate(1, imageShowIndex += 1);
		}
	};

	const posScrollFullSize = () => {
		if (window.scrollY) {
			window.scroll(0, 0);
		}
	};

	let fullSize;
	const writable_props = ["projets"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(2, fullSize = "full-size");
	const click_handler_1 = () => posScrollFullSize();
	const click_handler_2 = () => $$invalidate(2, fullSize = "");

	$$self.$$set = $$props => {
		if ("projets" in $$props) $$invalidate(0, projets = $$props.projets);
	};

	$$self.$capture_state = () => ({
		ApolloClient: DefaultClient,
		gql,
		snarkdown: t,
		Lightbox,
		projetQuery,
		preload,
		urlpApi,
		urlSlug,
		projets,
		imageShowIndex,
		firstImage,
		prevSlide,
		nextSlide,
		posScrollFullSize,
		fullSize
	});

	$$self.$inject_state = $$props => {
		if ("projets" in $$props) $$invalidate(0, projets = $$props.projets);
		if ("imageShowIndex" in $$props) $$invalidate(1, imageShowIndex = $$props.imageShowIndex);
		if ("fullSize" in $$props) $$invalidate(2, fullSize = $$props.fullSize);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		projets,
		imageShowIndex,
		fullSize,
		firstImage,
		prevSlide,
		nextSlide,
		posScrollFullSize,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { projets: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*projets*/ ctx[0] === undefined && !("projets" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'projets'");
		}
	}

	get projets() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projets(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
