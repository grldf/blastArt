import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, e as element, g as claim_element, h as children, j as detach_dev, k as attr_dev, E as toggle_class, l as add_location, n as insert_dev, p as noop, C as null_to_empty, o as append_dev, w as validate_each_argument, a as space, z as text, c as create_component, F as svg_element, f as claim_space, A as claim_text, b as claim_component, m as mount_component, G as listen_dev, D as set_data_dev, t as transition_in, q as transition_out, I as check_outros, x as destroy_each, r as destroy_component, J as run_all, u as empty, K as group_outros } from './client.400e076d.js';
import { S as SvelteSeo } from './SvelteSeo.c34c2abf.js';
import { t } from './snarkdown.es.257e5e6b.js';
import { g as gql, D as DefaultClient } from './bundle.esm.ce987c6b.js';

/* src/components/Lightbox.svelte generated by Svelte v3.35.0 */

const file$1 = "src/components/Lightbox.svelte";

// (15:4) {:else}
function create_else_block(ctx) {
	let img;
	let img_class_value;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			this.h();
		},
		l: function claim(nodes) {
			img = claim_element(nodes, "IMG", { class: true, src: true, alt: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(img, "class", img_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-1tclfls"));
			if (img.src !== (img_src_value = /*imageUrl*/ ctx[0])) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", /*alternText*/ ctx[1]);
			add_location(img, file$1, 15, 8, 445);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*imgFullSize*/ 8 && img_class_value !== (img_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-1tclfls"))) {
				attr_dev(img, "class", img_class_value);
			}

			if (dirty & /*imageUrl*/ 1 && img.src !== (img_src_value = /*imageUrl*/ ctx[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*alternText*/ 2) {
				attr_dev(img, "alt", /*alternText*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(15:4) {:else}",
		ctx
	});

	return block;
}

// (11:4) {#if imageUrl.match(regex)}
function create_if_block(ctx) {
	let video;
	let track;
	let video_class_value;
	let video_src_value;

	const block = {
		c: function create() {
			video = element("video");
			track = element("track");
			this.h();
		},
		l: function claim(nodes) {
			video = claim_element(nodes, "VIDEO", {
				class: true,
				poster: true,
				src: true,
				controls: true,
				type: true,
				preload: true
			});

			var video_nodes = children(video);
			track = claim_element(video_nodes, "TRACK", { kind: true });
			video_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(track, "kind", "captions");
			add_location(track, file$1, 12, 8, 385);
			attr_dev(video, "class", video_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-1tclfls"));
			attr_dev(video, "poster", /*videoPoster*/ ctx[4]);
			if (video.src !== (video_src_value = /*imageUrl*/ ctx[0])) attr_dev(video, "src", video_src_value);
			video.controls = true;
			attr_dev(video, "type", "video/mp4");
			attr_dev(video, "preload", "none");
			add_location(video, file$1, 11, 4, 271);
		},
		m: function mount(target, anchor) {
			insert_dev(target, video, anchor);
			append_dev(video, track);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*imgFullSize*/ 8 && video_class_value !== (video_class_value = "" + (null_to_empty(/*imgFullSize*/ ctx[3]) + " svelte-1tclfls"))) {
				attr_dev(video, "class", video_class_value);
			}

			if (dirty & /*videoPoster*/ 16) {
				attr_dev(video, "poster", /*videoPoster*/ ctx[4]);
			}

			if (dirty & /*imageUrl*/ 1 && video.src !== (video_src_value = /*imageUrl*/ ctx[0])) {
				attr_dev(video, "src", video_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(video);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(11:4) {#if imageUrl.match(regex)}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div;
	let show_if;

	function select_block_type(ctx, dirty) {
		if (show_if == null || dirty & /*imageUrl*/ 1) show_if = !!/*imageUrl*/ ctx[0].match(/*regex*/ ctx[5]);
		if (show_if) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if_block.c();
			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if_block.l(div_nodes);
			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", "mySlides svelte-1tclfls");
			toggle_class(div, "show", /*imageShowing*/ ctx[2]);
			add_location(div, file$1, 9, 0, 186);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if_block.m(div, null);
		},
		p: function update(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, null);
				}
			}

			if (dirty & /*imageShowing*/ 4) {
				toggle_class(div, "show", /*imageShowing*/ ctx[2]);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Lightbox", slots, []);
	let { imageUrl } = $$props;
	let { alternText } = $$props;
	let { imageShowing } = $$props;
	let { imgFullSize } = $$props;
	let { videoPoster } = $$props;
	let regex = /.mp4$/;
	const writable_props = ["imageUrl", "alternText", "imageShowing", "imgFullSize", "videoPoster"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Lightbox> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("imageUrl" in $$props) $$invalidate(0, imageUrl = $$props.imageUrl);
		if ("alternText" in $$props) $$invalidate(1, alternText = $$props.alternText);
		if ("imageShowing" in $$props) $$invalidate(2, imageShowing = $$props.imageShowing);
		if ("imgFullSize" in $$props) $$invalidate(3, imgFullSize = $$props.imgFullSize);
		if ("videoPoster" in $$props) $$invalidate(4, videoPoster = $$props.videoPoster);
	};

	$$self.$capture_state = () => ({
		imageUrl,
		alternText,
		imageShowing,
		imgFullSize,
		videoPoster,
		regex
	});

	$$self.$inject_state = $$props => {
		if ("imageUrl" in $$props) $$invalidate(0, imageUrl = $$props.imageUrl);
		if ("alternText" in $$props) $$invalidate(1, alternText = $$props.alternText);
		if ("imageShowing" in $$props) $$invalidate(2, imageShowing = $$props.imageShowing);
		if ("imgFullSize" in $$props) $$invalidate(3, imgFullSize = $$props.imgFullSize);
		if ("videoPoster" in $$props) $$invalidate(4, videoPoster = $$props.videoPoster);
		if ("regex" in $$props) $$invalidate(5, regex = $$props.regex);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [imageUrl, alternText, imageShowing, imgFullSize, videoPoster, regex];
}

class Lightbox extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance$1, create_fragment$1, safe_not_equal, {
			imageUrl: 0,
			alternText: 1,
			imageShowing: 2,
			imgFullSize: 3,
			videoPoster: 4
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Lightbox",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*imageUrl*/ ctx[0] === undefined && !("imageUrl" in props)) {
			console.warn("<Lightbox> was created without expected prop 'imageUrl'");
		}

		if (/*alternText*/ ctx[1] === undefined && !("alternText" in props)) {
			console.warn("<Lightbox> was created without expected prop 'alternText'");
		}

		if (/*imageShowing*/ ctx[2] === undefined && !("imageShowing" in props)) {
			console.warn("<Lightbox> was created without expected prop 'imageShowing'");
		}

		if (/*imgFullSize*/ ctx[3] === undefined && !("imgFullSize" in props)) {
			console.warn("<Lightbox> was created without expected prop 'imgFullSize'");
		}

		if (/*videoPoster*/ ctx[4] === undefined && !("videoPoster" in props)) {
			console.warn("<Lightbox> was created without expected prop 'videoPoster'");
		}
	}

	get imageUrl() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageUrl(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get alternText() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set alternText(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imageShowing() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imageShowing(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get imgFullSize() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set imgFullSize(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get videoPoster() {
		throw new Error("<Lightbox>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set videoPoster(value) {
		throw new Error("<Lightbox>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src/routes/projet/[slug].svelte generated by Svelte v3.35.0 */
const file = "src/routes/projet/[slug].svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	child_ctx[15] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[16] = list[i];
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[19] = list[i];
	return child_ctx;
}

// (79:10) {#each projet.projets as slug}
function create_each_block_3(ctx) {
	let a;
	let t_value = /*slug*/ ctx[19].titre + "";
	let t;
	let a_class_value;
	let a_href_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			a = element("a");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			a = claim_element(nodes, "A", { class: true, href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(a, "class", a_class_value = "link" + /*projet*/ ctx[16].id + " svelte-ag0puq");
			attr_dev(a, "href", a_href_value = urlSlug + /*slug*/ ctx[19].Slug);
			add_location(a, file, 79, 12, 1799);
		},
		m: function mount(target, anchor) {
			insert_dev(target, a, anchor);
			append_dev(a, t);

			if (!mounted) {
				dispose = listen_dev(a, "click", /*firstImage*/ ctx[3], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projets*/ 1 && t_value !== (t_value = /*slug*/ ctx[19].titre + "")) set_data_dev(t, t_value);

			if (dirty & /*projets*/ 1 && a_class_value !== (a_class_value = "link" + /*projet*/ ctx[16].id + " svelte-ag0puq")) {
				attr_dev(a, "class", a_class_value);
			}

			if (dirty & /*projets*/ 1 && a_href_value !== (a_href_value = urlSlug + /*slug*/ ctx[19].Slug)) {
				attr_dev(a, "href", a_href_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(a);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(79:10) {#each projet.projets as slug}",
		ctx
	});

	return block;
}

// (78:8) {#each info.lien as projet}
function create_each_block_2(ctx) {
	let each_1_anchor;
	let each_value_3 = /*projet*/ ctx[16].projets;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projets, urlSlug, firstImage*/ 9) {
				each_value_3 = /*projet*/ ctx[16].projets;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(78:8) {#each info.lien as projet}",
		ctx
	});

	return block;
}

// (166:6) {#each info.galery as image, i}
function create_each_block_1(ctx) {
	let lightbox;
	let current;

	lightbox = new Lightbox({
			props: {
				imageUrl: urlpApi + /*image*/ ctx[13].url,
				imageShowing: /*i*/ ctx[15] + 1 === /*imageShowIndex*/ ctx[1],
				alternText: /*info*/ ctx[10].titre,
				imgFullSize: "img-" + /*fullSize*/ ctx[2],
				videoPoster: urlpApi + /*info*/ ctx[10].cover.url
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(lightbox.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(lightbox.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(lightbox, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const lightbox_changes = {};
			if (dirty & /*projets*/ 1) lightbox_changes.imageUrl = urlpApi + /*image*/ ctx[13].url;
			if (dirty & /*imageShowIndex*/ 2) lightbox_changes.imageShowing = /*i*/ ctx[15] + 1 === /*imageShowIndex*/ ctx[1];
			if (dirty & /*projets*/ 1) lightbox_changes.alternText = /*info*/ ctx[10].titre;
			if (dirty & /*fullSize*/ 4) lightbox_changes.imgFullSize = "img-" + /*fullSize*/ ctx[2];
			if (dirty & /*projets*/ 1) lightbox_changes.videoPoster = urlpApi + /*info*/ ctx[10].cover.url;
			lightbox.$set(lightbox_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(lightbox.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(lightbox.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(lightbox, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(166:6) {#each info.galery as image, i}",
		ctx
	});

	return block;
}

// (75:2) {#each projets as info}
function create_each_block(ctx) {
	let div0;
	let nav;
	let t0;
	let h5;
	let t1;
	let t2;
	let svelteseo;
	let t3;
	let h2;
	let t4_value = /*info*/ ctx[10].titre + "";
	let t4;
	let t5;
	let div1;
	let raw_value = t(/*info*/ ctx[10].description) + "";
	let t6;
	let svg0;
	let g1;
	let circle0;
	let g0;
	let path0;
	let path1;
	let path2;
	let path3;
	let t7;
	let div2;
	let t8;
	let svg1;
	let g2;
	let circle1;
	let path4;
	let path5;
	let path6;
	let path7;
	let t9;
	let button0;
	let t10;
	let t11;
	let button1;
	let t12;
	let t13;
	let current;
	let mounted;
	let dispose;
	let each_value_2 = /*info*/ ctx[10].lien;
	validate_each_argument(each_value_2);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	svelteseo = new SvelteSeo({
			props: {
				description: /*info*/ ctx[10].description,
				title: /*info*/ ctx[10].titre,
				openGraph: {
					type: "article",
					title: /*info*/ ctx[10].titre,
					description: /*info*/ ctx[10].description,
					url: urlSlug + ("projet/").Slug,
					images: [
						{
							url: /*info*/ ctx[10].galery.url,
							alt: /*info*/ ctx[10].description
						}
					]
				}
			},
			$$inline: true
		});

	let each_value_1 = /*info*/ ctx[10].galery;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div0 = element("div");
			nav = element("nav");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = space();
			h5 = element("h5");
			t1 = text("❮ Projet ❯");
			t2 = space();
			create_component(svelteseo.$$.fragment);
			t3 = space();
			h2 = element("h2");
			t4 = text(t4_value);
			t5 = space();
			div1 = element("div");
			t6 = space();
			svg0 = svg_element("svg");
			g1 = svg_element("g");
			circle0 = svg_element("circle");
			g0 = svg_element("g");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			t7 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t8 = space();
			svg1 = svg_element("svg");
			g2 = svg_element("g");
			circle1 = svg_element("circle");
			path4 = svg_element("path");
			path5 = svg_element("path");
			path6 = svg_element("path");
			path7 = svg_element("path");
			t9 = space();
			button0 = element("button");
			t10 = text("❮");
			t11 = space();
			button1 = element("button");
			t12 = text("❯");
			t13 = space();
			this.h();
		},
		l: function claim(nodes) {
			div0 = claim_element(nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			nav = claim_element(div0_nodes, "NAV", { class: true });
			var nav_nodes = children(nav);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(nav_nodes);
			}

			t0 = claim_space(nav_nodes);
			h5 = claim_element(nav_nodes, "H5", { class: true });
			var h5_nodes = children(h5);
			t1 = claim_text(h5_nodes, "❮ Projet ❯");
			h5_nodes.forEach(detach_dev);
			nav_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			claim_component(svelteseo.$$.fragment, nodes);
			t3 = claim_space(nodes);
			h2 = claim_element(nodes, "H2", { class: true });
			var h2_nodes = children(h2);
			t4 = claim_text(h2_nodes, t4_value);
			h2_nodes.forEach(detach_dev);
			t5 = claim_space(nodes);
			div1 = claim_element(nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div1_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);

			svg0 = claim_element(
				nodes,
				"svg",
				{
					class: true,
					xmlns: true,
					width: true,
					height: true,
					viewBox: true
				},
				1
			);

			var svg0_nodes = children(svg0);
			g1 = claim_element(svg0_nodes, "g", { id: true, transform: true }, 1);
			var g1_nodes = children(g1);

			circle0 = claim_element(
				g1_nodes,
				"circle",
				{
					id: true,
					"data-name": true,
					cx: true,
					cy: true,
					r: true,
					transform: true,
					fill: true
				},
				1
			);

			children(circle0).forEach(detach_dev);

			g0 = claim_element(
				g1_nodes,
				"g",
				{
					id: true,
					"data-name": true,
					transform: true
				},
				1
			);

			var g0_nodes = children(g0);

			path0 = claim_element(
				g0_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path0).forEach(detach_dev);

			path1 = claim_element(
				g0_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path1).forEach(detach_dev);

			path2 = claim_element(
				g0_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path2).forEach(detach_dev);

			path3 = claim_element(
				g0_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path3).forEach(detach_dev);
			g0_nodes.forEach(detach_dev);
			g1_nodes.forEach(detach_dev);
			svg0_nodes.forEach(detach_dev);
			t7 = claim_space(nodes);
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div2_nodes);
			}

			t8 = claim_space(div2_nodes);

			svg1 = claim_element(
				div2_nodes,
				"svg",
				{
					class: true,
					xmlns: true,
					width: true,
					height: true,
					viewBox: true
				},
				1
			);

			var svg1_nodes = children(svg1);
			g2 = claim_element(svg1_nodes, "g", { id: true, transform: true }, 1);
			var g2_nodes = children(g2);

			circle1 = claim_element(
				g2_nodes,
				"circle",
				{
					id: true,
					"data-name": true,
					cx: true,
					cy: true,
					r: true,
					transform: true,
					fill: true
				},
				1
			);

			children(circle1).forEach(detach_dev);

			path4 = claim_element(
				g2_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path4).forEach(detach_dev);

			path5 = claim_element(
				g2_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path5).forEach(detach_dev);

			path6 = claim_element(
				g2_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path6).forEach(detach_dev);

			path7 = claim_element(
				g2_nodes,
				"path",
				{
					id: true,
					"data-name": true,
					d: true,
					transform: true,
					fill: true
				},
				1
			);

			children(path7).forEach(detach_dev);
			g2_nodes.forEach(detach_dev);
			svg1_nodes.forEach(detach_dev);
			t9 = claim_space(div2_nodes);
			button0 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t10 = claim_text(button0_nodes, "❮");
			button0_nodes.forEach(detach_dev);
			t11 = claim_space(div2_nodes);
			button1 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t12 = claim_text(button1_nodes, "❯");
			button1_nodes.forEach(detach_dev);
			t13 = claim_space(div2_nodes);
			div2_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(h5, "class", "linkText svelte-ag0puq");
			add_location(h5, file, 86, 8, 1989);
			attr_dev(nav, "class", "svelte-ag0puq");
			add_location(nav, file, 76, 6, 1704);
			attr_dev(div0, "class", "post-info svelte-ag0puq");
			add_location(div0, file, 75, 4, 1674);
			attr_dev(h2, "class", "svelte-ag0puq");
			add_location(h2, file, 105, 4, 2563);
			attr_dev(div1, "class", "text svelte-ag0puq");
			add_location(div1, file, 106, 4, 2589);
			attr_dev(circle0, "id", "Ellipse_12");
			attr_dev(circle0, "data-name", "Ellipse 12");
			attr_dev(circle0, "cx", "20.5");
			attr_dev(circle0, "cy", "20.5");
			attr_dev(circle0, "r", "20.5");
			attr_dev(circle0, "transform", "translate(-0.806 -5.308)");
			attr_dev(circle0, "fill", "rgba(0,0,0,0.1)");
			add_location(circle0, file, 119, 8, 2974);
			attr_dev(path0, "id", "Tracé_80");
			attr_dev(path0, "data-name", "Tracé 80");
			attr_dev(path0, "d", "M12.817,9.357c-1.213-1.213-3.072-3.074-4.2-4.2l-.8-.8s1.3-1.3,1.834-1.835-.423-.509-.423-.509L2.04,1.339s-.582-.047-.582.512c0,.773.909,7.221.909,7.221s0,.982.648.33,1.7-1.7,1.7-1.7l.717.719,4.25,4.249A4.943,4.943,0,0,1,12.817,9.357Z");
			attr_dev(path0, "transform", "translate(-1.392 -1.308)");
			attr_dev(path0, "fill", "#e42ef5");
			add_location(path0, file, 133, 10, 3322);
			attr_dev(path1, "id", "Tracé_81");
			attr_dev(path1, "data-name", "Tracé 81");
			attr_dev(path1, "d", "M324.952,323.169s0-.981-.649-.329-1.7,1.7-1.7,1.7-.284-.283-.717-.718c-1.153-1.153-3.242-3.243-4.437-4.436a4.948,4.948,0,0,1-3.408,3.045l4.651,4.654.8.8s-1.3,1.3-1.835,1.837.425.509.425.509l7.193.681a.515.515,0,0,0,.579-.515C325.858,329.62,324.952,323.169,324.952,323.169Z");
			attr_dev(path1, "transform", "translate(-299.794 -304.922)");
			attr_dev(path1, "fill", "#e42ef5");
			add_location(path1, file, 140, 10, 3736);
			attr_dev(path2, "id", "Tracé_82");
			attr_dev(path2, "data-name", "Tracé 82");
			attr_dev(path2, "d", "M8.361,315.848c-1.179,1.18-3.3,3.3-4.535,4.537-.483.483-.8.8-.8.8l-1.837-1.837c-.536-.537-.509.423-.509.423L0,326.967a.514.514,0,0,0,.514.581c.773,0,7.222-.907,7.222-.907s.98,0,.327-.653S6.373,324.3,6.373,324.3l.72-.721c1.2-1.2,3.4-3.4,4.565-4.566A4.954,4.954,0,0,1,8.361,315.848Z");
			attr_dev(path2, "transform", "translate(-0.003 -301.548)");
			attr_dev(path2, "fill", "#e42ef5");
			add_location(path2, file, 147, 10, 4193);
			attr_dev(path3, "id", "Tracé_83");
			attr_dev(path3, "data-name", "Tracé 83");
			attr_dev(path3, "d", "M328.183,12.17,332.5,7.854c.484-.483.8-.8.8-.8s1.3,1.3,1.837,1.835.507-.423.507-.423l.678-7.2a.512.512,0,0,0-.515-.58c-.772,0-7.22.907-7.22.907s-.981,0-.33.65,1.694,1.7,1.694,1.7-.281.284-.717.718c-1.057,1.057-2.9,2.894-4.118,4.116A4.946,4.946,0,0,1,328.183,12.17Z");
			attr_dev(path3, "transform", "translate(-310.364 -0.692)");
			attr_dev(path3, "fill", "#e42ef5");
			add_location(path3, file, 154, 10, 4656);
			attr_dev(g0, "id", "Groupe_1");
			attr_dev(g0, "data-name", "Groupe 1");
			attr_dev(g0, "transform", "translate(6.662 2.192)");
			add_location(g0, file, 128, 8, 3199);
			attr_dev(g1, "id", "full-screen-button");
			attr_dev(g1, "transform", "translate(0.806 5.308)");
			add_location(g1, file, 118, 6, 2903);
			attr_dev(svg0, "class", "btn-full-size svelte-ag0puq");
			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg0, "width", "41");
			attr_dev(svg0, "height", "41");
			attr_dev(svg0, "viewBox", "0 0 41 41");
			add_location(svg0, file, 109, 4, 2665);
			attr_dev(circle1, "id", "Ellipse_13");
			attr_dev(circle1, "data-name", "Ellipse 13");
			attr_dev(circle1, "cx", "20.5");
			attr_dev(circle1, "cy", "20.5");
			attr_dev(circle1, "r", "20.5");
			attr_dev(circle1, "transform", "translate(-1.729 -2.178)");
			attr_dev(circle1, "fill", "rgba(0,0,0,0.1)");
			add_location(circle1, file, 184, 10, 5730);
			attr_dev(path4, "id", "Tracé_87");
			attr_dev(path4, "data-name", "Tracé 87");
			attr_dev(path4, "d", "M29.024,13.474l-2.232-2.439,6.781-6.583L29.024.031l-6.2,6.431L20,4.452v9.022Z");
			attr_dev(path4, "transform", "translate(1.696 3.031)");
			attr_dev(path4, "fill", "#ef11a1");
			add_location(path4, file, 193, 10, 5973);
			attr_dev(path5, "id", "Tracé_88");
			attr_dev(path5, "data-name", "Tracé 88");
			attr_dev(path5, "d", "M9.024,13.443,6.792,11l6.781-6.583L9.024,0l-6.2,6.431L0,4.421v9.022Z");
			attr_dev(path5, "transform", "translate(35.139 20.139) rotate(90)");
			attr_dev(path5, "fill", "#ef11a1");
			add_location(path5, file, 200, 10, 6229);
			attr_dev(path6, "id", "Tracé_89");
			attr_dev(path6, "data-name", "Tracé 89");
			attr_dev(path6, "d", "M9.024,13.443,6.792,11l6.781-6.583L9.024,0l-6.2,6.431L0,4.421v9.022Z");
			attr_dev(path6, "transform", "translate(16.422 33.712) rotate(180)");
			attr_dev(path6, "fill", "#ef11a1");
			add_location(path6, file, 207, 10, 6489);
			attr_dev(path7, "id", "Tracé_90");
			attr_dev(path7, "data-name", "Tracé 90");
			attr_dev(path7, "d", "M9.024,13.443,6.792,11l6.781-6.583L9.024,0l-6.2,6.431L0,4.421v9.022Z");
			attr_dev(path7, "transform", "translate(2.979 16.506) rotate(-90)");
			attr_dev(path7, "fill", "#ef11a1");
			add_location(path7, file, 214, 10, 6750);
			attr_dev(g2, "id", "exit-fullscreen");
			attr_dev(g2, "transform", "translate(1.729 2.178)");
			add_location(g2, file, 183, 8, 5660);
			attr_dev(svg1, "class", "btn-small-size svelte-ag0puq");
			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg1, "width", "41");
			attr_dev(svg1, "height", "41");
			attr_dev(svg1, "viewBox", "0 0 41 41");
			add_location(svg1, file, 175, 6, 5457);
			attr_dev(button0, "class", "prev svelte-ag0puq");
			add_location(button0, file, 223, 6, 7032);
			attr_dev(button1, "class", "next svelte-ag0puq");
			add_location(button1, file, 224, 6, 7098);
			attr_dev(div2, "class", "galery svelte-ag0puq");
			add_location(div2, file, 164, 4, 5132);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, nav);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(nav, null);
			}

			append_dev(nav, t0);
			append_dev(nav, h5);
			append_dev(h5, t1);
			insert_dev(target, t2, anchor);
			mount_component(svelteseo, target, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, h2, anchor);
			append_dev(h2, t4);
			insert_dev(target, t5, anchor);
			insert_dev(target, div1, anchor);
			div1.innerHTML = raw_value;
			insert_dev(target, t6, anchor);
			insert_dev(target, svg0, anchor);
			append_dev(svg0, g1);
			append_dev(g1, circle0);
			append_dev(g1, g0);
			append_dev(g0, path0);
			append_dev(g0, path1);
			append_dev(g0, path2);
			append_dev(g0, path3);
			insert_dev(target, t7, anchor);
			insert_dev(target, div2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			append_dev(div2, t8);
			append_dev(div2, svg1);
			append_dev(svg1, g2);
			append_dev(g2, circle1);
			append_dev(g2, path4);
			append_dev(g2, path5);
			append_dev(g2, path6);
			append_dev(g2, path7);
			append_dev(div2, t9);
			append_dev(div2, button0);
			append_dev(button0, t10);
			append_dev(div2, t11);
			append_dev(div2, button1);
			append_dev(button1, t12);
			append_dev(div2, t13);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(svg0, "click", /*click_handler*/ ctx[7], false, false, false),
					listen_dev(svg0, "click", /*click_handler_1*/ ctx[8], false, false, false),
					listen_dev(svg1, "click", /*click_handler_2*/ ctx[9], false, false, false),
					listen_dev(button0, "click", /*prevSlide*/ ctx[4], false, false, false),
					listen_dev(button1, "click", /*nextSlide*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*projets, urlSlug, firstImage*/ 9) {
				each_value_2 = /*info*/ ctx[10].lien;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(nav, t0);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			const svelteseo_changes = {};
			if (dirty & /*projets*/ 1) svelteseo_changes.description = /*info*/ ctx[10].description;
			if (dirty & /*projets*/ 1) svelteseo_changes.title = /*info*/ ctx[10].titre;

			if (dirty & /*projets*/ 1) svelteseo_changes.openGraph = {
				type: "article",
				title: /*info*/ ctx[10].titre,
				description: /*info*/ ctx[10].description,
				url: urlSlug + ("projet/").Slug,
				images: [
					{
						url: /*info*/ ctx[10].galery.url,
						alt: /*info*/ ctx[10].description
					}
				]
			};

			svelteseo.$set(svelteseo_changes);
			if ((!current || dirty & /*projets*/ 1) && t4_value !== (t4_value = /*info*/ ctx[10].titre + "")) set_data_dev(t4, t4_value);
			if ((!current || dirty & /*projets*/ 1) && raw_value !== (raw_value = t(/*info*/ ctx[10].description) + "")) div1.innerHTML = raw_value;
			if (dirty & /*urlpApi, projets, imageShowIndex, fullSize*/ 7) {
				each_value_1 = /*info*/ ctx[10].galery;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div2, t8);
					}
				}

				group_outros();

				for (i = each_value_1.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(svelteseo.$$.fragment, local);

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			transition_out(svelteseo.$$.fragment, local);
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			destroy_each(each_blocks_1, detaching);
			if (detaching) detach_dev(t2);
			destroy_component(svelteseo, detaching);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(h2);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(svg0);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(75:2) {#each projets as info}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div;
	let div_class_value;
	let current;
	let each_value = /*projets*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l: function claim(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div, "class", div_class_value = "projet " + /*fullSize*/ ctx[2] + " svelte-ag0puq");
			add_location(div, file, 73, 0, 1612);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*nextSlide, prevSlide, fullSize, projets, urlpApi, imageShowIndex, posScrollFullSize, snarkdown, urlSlug, firstImage*/ 127) {
				each_value = /*projets*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			if (!current || dirty & /*fullSize*/ 4 && div_class_value !== (div_class_value = "projet " + /*fullSize*/ ctx[2] + " svelte-ag0puq")) {
				attr_dev(div, "class", div_class_value);
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const projetQuery = gql`
    query Projets($Slug: String!) {
      projets: projets(where: { Slug: $Slug }) {
        id
        titre
        description
        galery {
          id
          url
        }
        cover {
          url
        }
        lien {
          id
          projets {
            Slug
            titre
          }
        }
      }
    }
  `;

async function preload(page) {
	const client = new DefaultClient({
			uri: "https://www.grldfaure.xyz/graphql",
			fetch: this.fetch
		});

	const results = await client.query({
		query: projetQuery,
		variables: { Slug: page.params.slug }
	});

	return { projets: results.data.projets };
}

const urlpApi = "https://www.grldfaure.xyz";
const urlSlug = "projet/";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("U5Bslugu5D", slots, []);
	let { projets } = $$props;
	let imageShowIndex = 1;

	const firstImage = () => {
		$$invalidate(1, imageShowIndex = 1);
	};

	const prevSlide = () => {
		if (imageShowIndex === 1 || imageShowIndex > projets[0].galery.length) {
			$$invalidate(1, imageShowIndex = projets[0].galery.length);
		} else {
			$$invalidate(1, imageShowIndex -= 1);
		}
	};

	const nextSlide = () => {
		if (imageShowIndex === projets[0].galery.length) {
			$$invalidate(1, imageShowIndex = 1);
		} else {
			$$invalidate(1, imageShowIndex += 1);
		}
	};

	const posScrollFullSize = () => {
		if (window.scrollY) {
			window.scroll(0, 0);
		}
	};

	let fullSize;
	const writable_props = ["projets"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<U5Bslugu5D> was created with unknown prop '${key}'`);
	});

	const click_handler = () => $$invalidate(2, fullSize = "full-size");
	const click_handler_1 = () => posScrollFullSize();
	const click_handler_2 = () => $$invalidate(2, fullSize = "");

	$$self.$$set = $$props => {
		if ("projets" in $$props) $$invalidate(0, projets = $$props.projets);
	};

	$$self.$capture_state = () => ({
		ApolloClient: DefaultClient,
		gql,
		snarkdown: t,
		Lightbox,
		SvelteSeo,
		projetQuery,
		preload,
		urlpApi,
		urlSlug,
		projets,
		imageShowIndex,
		firstImage,
		prevSlide,
		nextSlide,
		posScrollFullSize,
		fullSize
	});

	$$self.$inject_state = $$props => {
		if ("projets" in $$props) $$invalidate(0, projets = $$props.projets);
		if ("imageShowIndex" in $$props) $$invalidate(1, imageShowIndex = $$props.imageShowIndex);
		if ("fullSize" in $$props) $$invalidate(2, fullSize = $$props.fullSize);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		projets,
		imageShowIndex,
		fullSize,
		firstImage,
		prevSlide,
		nextSlide,
		posScrollFullSize,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class U5Bslugu5D extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { projets: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "U5Bslugu5D",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*projets*/ ctx[0] === undefined && !("projets" in props)) {
			console.warn("<U5Bslugu5D> was created without expected prop 'projets'");
		}
	}

	get projets() {
		throw new Error("<U5Bslugu5D>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set projets(value) {
		throw new Error("<U5Bslugu5D>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default U5Bslugu5D;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
