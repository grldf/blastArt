import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, n as noop, e as element, g as claim_element, h as attr_dev, j as add_location, k as insert_dev, p as detach_dev, a as space, q as empty, f as claim_space, r as validate_each_argument, u as destroy_each, w as query_selector_all, x as append_dev } from './client.679139a6.js';

/* node_modules/svelte-seo/src/SvelteSeo.svelte generated by Svelte v3.35.0 */

const file = "node_modules/svelte-seo/src/SvelteSeo.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[11] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[14] = list[i];
	return child_ctx;
}

// (13:2) {#if title}
function create_if_block_24(ctx) {
	document.title = /*title*/ ctx[0];
	const block = { c: noop, l: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_24.name,
		type: "if",
		source: "(13:2) {#if title}",
		ctx
	});

	return block;
}

// (24:2) {#if description}
function create_if_block_23(ctx) {
	let meta;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "description");
			attr_dev(meta, "content", /*description*/ ctx[3]);
			add_location(meta, file, 24, 4, 612);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*description*/ 8) {
				attr_dev(meta, "content", /*description*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_23.name,
		type: "if",
		source: "(24:2) {#if description}",
		ctx
	});

	return block;
}

// (28:2) {#if keywords}
function create_if_block_22(ctx) {
	let meta;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "keywords");
			attr_dev(meta, "content", /*keywords*/ ctx[4]);
			add_location(meta, file, 28, 4, 692);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*keywords*/ 16) {
				attr_dev(meta, "content", /*keywords*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_22.name,
		type: "if",
		source: "(28:2) {#if keywords}",
		ctx
	});

	return block;
}

// (32:2) {#if openGraph}
function create_if_block_6(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block5_anchor;
	let if_block0 = /*openGraph*/ ctx[6].title && create_if_block_21(ctx);
	let if_block1 = /*openGraph*/ ctx[6].description && create_if_block_20(ctx);
	let if_block2 = (/*openGraph*/ ctx[6].url || /*canonical*/ ctx[5]) && create_if_block_19(ctx);
	let if_block3 = /*openGraph*/ ctx[6].type && create_if_block_18(ctx);
	let if_block4 = /*openGraph*/ ctx[6].article && create_if_block_11(ctx);
	let if_block5 = /*openGraph*/ ctx[6].images && /*openGraph*/ ctx[6].images.length && create_if_block_7(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			if (if_block5) if_block5.c();
			if_block5_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t2 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t3 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t4 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			if_block5_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_dev(target, if_block5_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*openGraph*/ ctx[6].title) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_21(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*openGraph*/ ctx[6].description) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_20(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*openGraph*/ ctx[6].url || /*canonical*/ ctx[5]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_19(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*openGraph*/ ctx[6].type) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_18(ctx);
					if_block3.c();
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*openGraph*/ ctx[6].article) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_11(ctx);
					if_block4.c();
					if_block4.m(t4.parentNode, t4);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*openGraph*/ ctx[6].images && /*openGraph*/ ctx[6].images.length) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_7(ctx);
					if_block5.c();
					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach_dev(if_block5_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(32:2) {#if openGraph}",
		ctx
	});

	return block;
}

// (33:4) {#if openGraph.title}
function create_if_block_21(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:title");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].title);
			add_location(meta, file, 33, 8, 797);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].title)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_21.name,
		type: "if",
		source: "(33:4) {#if openGraph.title}",
		ctx
	});

	return block;
}

// (37:4) {#if openGraph.description}
function create_if_block_20(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:description");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].description);
			add_location(meta, file, 37, 6, 901);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].description)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_20.name,
		type: "if",
		source: "(37:4) {#if openGraph.description}",
		ctx
	});

	return block;
}

// (41:4) {#if openGraph.url || canonical}
function create_if_block_19(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:url");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].url || /*canonical*/ ctx[5]);
			add_location(meta, file, 41, 6, 1022);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph, canonical*/ 96 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].url || /*canonical*/ ctx[5])) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_19.name,
		type: "if",
		source: "(41:4) {#if openGraph.url || canonical}",
		ctx
	});

	return block;
}

// (45:4) {#if openGraph.type}
function create_if_block_18(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:type");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].type.toLowerCase());
			add_location(meta, file, 45, 6, 1128);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].type.toLowerCase())) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_18.name,
		type: "if",
		source: "(45:4) {#if openGraph.type}",
		ctx
	});

	return block;
}

// (49:4) {#if openGraph.article}
function create_if_block_11(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block5_anchor;
	let if_block0 = /*openGraph*/ ctx[6].article.publishedTime && create_if_block_17(ctx);
	let if_block1 = /*openGraph*/ ctx[6].article.modifiedTime && create_if_block_16(ctx);
	let if_block2 = /*openGraph*/ ctx[6].article.expirationTime && create_if_block_15(ctx);
	let if_block3 = /*openGraph*/ ctx[6].article.section && create_if_block_14(ctx);
	let if_block4 = /*openGraph*/ ctx[6].article.authors && /*openGraph*/ ctx[6].article.authors.length && create_if_block_13(ctx);
	let if_block5 = /*openGraph*/ ctx[6].article.tags && /*openGraph*/ ctx[6].article.tags.length && create_if_block_12(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			if (if_block5) if_block5.c();
			if_block5_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t2 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t3 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t4 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			if_block5_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_dev(target, if_block5_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*openGraph*/ ctx[6].article.publishedTime) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_17(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*openGraph*/ ctx[6].article.modifiedTime) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_16(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*openGraph*/ ctx[6].article.expirationTime) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_15(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*openGraph*/ ctx[6].article.section) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_14(ctx);
					if_block3.c();
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*openGraph*/ ctx[6].article.authors && /*openGraph*/ ctx[6].article.authors.length) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_13(ctx);
					if_block4.c();
					if_block4.m(t4.parentNode, t4);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*openGraph*/ ctx[6].article.tags && /*openGraph*/ ctx[6].article.tags.length) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_12(ctx);
					if_block5.c();
					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach_dev(if_block5_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(49:4) {#if openGraph.article}",
		ctx
	});

	return block;
}

// (50:6) {#if openGraph.article.publishedTime}
function create_if_block_17(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:published_time");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.publishedTime);
			add_location(meta, file, 50, 8, 1286);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.publishedTime)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_17.name,
		type: "if",
		source: "(50:6) {#if openGraph.article.publishedTime}",
		ctx
	});

	return block;
}

// (56:6) {#if openGraph.article.modifiedTime}
function create_if_block_16(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:modified_time");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.modifiedTime);
			add_location(meta, file, 56, 8, 1455);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.modifiedTime)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_16.name,
		type: "if",
		source: "(56:6) {#if openGraph.article.modifiedTime}",
		ctx
	});

	return block;
}

// (62:6) {#if openGraph.article.expirationTime}
function create_if_block_15(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:expiration_time");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.expirationTime);
			add_location(meta, file, 62, 8, 1624);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.expirationTime)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_15.name,
		type: "if",
		source: "(62:6) {#if openGraph.article.expirationTime}",
		ctx
	});

	return block;
}

// (68:6) {#if openGraph.article.section}
function create_if_block_14(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:section");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.section);
			add_location(meta, file, 68, 8, 1790);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.section)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_14.name,
		type: "if",
		source: "(68:6) {#if openGraph.article.section}",
		ctx
	});

	return block;
}

// (72:6) {#if openGraph.article.authors && openGraph.article.authors.length}
function create_if_block_13(ctx) {
	let each_1_anchor;
	let each_value_2 = /*openGraph*/ ctx[6].article.authors;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64) {
				each_value_2 = /*openGraph*/ ctx[6].article.authors;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_13.name,
		type: "if",
		source: "(72:6) {#if openGraph.article.authors && openGraph.article.authors.length}",
		ctx
	});

	return block;
}

// (73:8) {#each openGraph.article.authors as author}
function create_each_block_2(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:author");
			attr_dev(meta, "content", meta_content_value = /*author*/ ctx[14]);
			add_location(meta, file, 73, 10, 2011);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*author*/ ctx[14])) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(73:8) {#each openGraph.article.authors as author}",
		ctx
	});

	return block;
}

// (78:6) {#if openGraph.article.tags && openGraph.article.tags.length}
function create_if_block_12(ctx) {
	let each_1_anchor;
	let each_value_1 = /*openGraph*/ ctx[6].article.tags;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64) {
				each_value_1 = /*openGraph*/ ctx[6].article.tags;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_12.name,
		type: "if",
		source: "(78:6) {#if openGraph.article.tags && openGraph.article.tags.length}",
		ctx
	});

	return block;
}

// (79:8) {#each openGraph.article.tags as tag}
function create_each_block_1(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:tag");
			attr_dev(meta, "content", meta_content_value = /*tag*/ ctx[11]);
			add_location(meta, file, 79, 10, 2216);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*tag*/ ctx[11])) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(79:8) {#each openGraph.article.tags as tag}",
		ctx
	});

	return block;
}

// (85:4) {#if openGraph.images && openGraph.images.length}
function create_if_block_7(ctx) {
	let each_1_anchor;
	let each_value = /*openGraph*/ ctx[6].images;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64) {
				each_value = /*openGraph*/ ctx[6].images;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(85:4) {#if openGraph.images && openGraph.images.length}",
		ctx
	});

	return block;
}

// (88:8) {#if image.alt}
function create_if_block_10(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image:alt");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[8].alt);
			add_location(meta, file, 88, 10, 2486);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[8].alt)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(88:8) {#if image.alt}",
		ctx
	});

	return block;
}

// (91:8) {#if image.width}
function create_if_block_9(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image:width");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[8].width.toString());
			add_location(meta, file, 91, 10, 2589);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[8].width.toString())) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(91:8) {#if image.width}",
		ctx
	});

	return block;
}

// (94:8) {#if image.height}
function create_if_block_8(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image:height");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[8].height.toString());
			add_location(meta, file, 94, 10, 2708);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[8].height.toString())) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(94:8) {#if image.height}",
		ctx
	});

	return block;
}

// (86:6) {#each openGraph.images as image}
function create_each_block(ctx) {
	let meta;
	let meta_content_value;
	let t0;
	let t1;
	let t2;
	let if_block2_anchor;
	let if_block0 = /*image*/ ctx[8].alt && create_if_block_10(ctx);
	let if_block1 = /*image*/ ctx[8].width && create_if_block_9(ctx);
	let if_block2 = /*image*/ ctx[8].height && create_if_block_8(ctx);

	const block = {
		c: function create() {
			meta = element("meta");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t2 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[8].url);
			add_location(meta, file, 86, 8, 2403);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, if_block2_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[8].url)) {
				attr_dev(meta, "content", meta_content_value);
			}

			if (/*image*/ ctx[8].alt) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_10(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*image*/ ctx[8].width) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_9(ctx);
					if_block1.c();
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*image*/ ctx[8].height) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_8(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
			if (detaching) detach_dev(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(if_block2_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(86:6) {#each openGraph.images as image}",
		ctx
	});

	return block;
}

// (101:2) {#if twitter}
function create_if_block(ctx) {
	let meta;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block4_anchor;
	let if_block0 = /*twitter*/ ctx[7].site && create_if_block_5(ctx);
	let if_block1 = /*twitter*/ ctx[7].title && create_if_block_4(ctx);
	let if_block2 = /*twitter*/ ctx[7].description && create_if_block_3(ctx);
	let if_block3 = /*twitter*/ ctx[7].image && create_if_block_2(ctx);
	let if_block4 = /*twitter*/ ctx[7].imageAlt && create_if_block_1(ctx);

	const block = {
		c: function create() {
			meta = element("meta");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t2 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t3 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t4 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			if_block4_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:card");
			attr_dev(meta, "content", "summary_large_image");
			add_location(meta, file, 101, 4, 2845);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, if_block4_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*twitter*/ ctx[7].site) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_5(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*twitter*/ ctx[7].title) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_4(ctx);
					if_block1.c();
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*twitter*/ ctx[7].description) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_3(ctx);
					if_block2.c();
					if_block2.m(t3.parentNode, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*twitter*/ ctx[7].image) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_2(ctx);
					if_block3.c();
					if_block3.m(t4.parentNode, t4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*twitter*/ ctx[7].imageAlt) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_1(ctx);
					if_block4.c();
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
			if (detaching) detach_dev(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(if_block4_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(101:2) {#if twitter}",
		ctx
	});

	return block;
}

// (103:4) {#if twitter.site}
function create_if_block_5(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:site");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].site);
			add_location(meta, file, 103, 6, 2933);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].site)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(103:4) {#if twitter.site}",
		ctx
	});

	return block;
}

// (109:4) {#if twitter.title}
function create_if_block_4(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:title");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].title);
			add_location(meta, file, 109, 6, 3047);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].title)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(109:4) {#if twitter.title}",
		ctx
	});

	return block;
}

// (115:4) {#if twitter.description}
function create_if_block_3(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:description");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].description);
			add_location(meta, file, 115, 6, 3169);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].description)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(115:4) {#if twitter.description}",
		ctx
	});

	return block;
}

// (121:4) {#if twitter.image}
function create_if_block_2(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:image");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].image);
			add_location(meta, file, 121, 6, 3297);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].image)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(121:4) {#if twitter.image}",
		ctx
	});

	return block;
}

// (127:4) {#if twitter.imageAlt}
function create_if_block_1(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:image:alt");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].imageAlt);
			add_location(meta, file, 127, 6, 3416);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].imageAlt)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(127:4) {#if twitter.imageAlt}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let meta0;
	let meta0_content_value;
	let meta1;
	let meta1_content_value;
	let if_block1_anchor;
	let if_block2_anchor;
	let if_block3_anchor;
	let if_block4_anchor;
	let if_block0 = /*title*/ ctx[0] && create_if_block_24(ctx);
	let if_block1 = /*description*/ ctx[3] && create_if_block_23(ctx);
	let if_block2 = /*keywords*/ ctx[4] && create_if_block_22(ctx);
	let if_block3 = /*openGraph*/ ctx[6] && create_if_block_6(ctx);
	let if_block4 = /*twitter*/ ctx[7] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			meta0 = element("meta");
			meta1 = element("meta");
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-s135k3\"]", document.head);
			if (if_block0) if_block0.l(head_nodes);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			if (if_block1) if_block1.l(head_nodes);
			if_block1_anchor = empty();
			if (if_block2) if_block2.l(head_nodes);
			if_block2_anchor = empty();
			if (if_block3) if_block3.l(head_nodes);
			if_block3_anchor = empty();
			if (if_block4) if_block4.l(head_nodes);
			if_block4_anchor = empty();
			head_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "name", "robots");
			attr_dev(meta0, "content", meta0_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`);
			add_location(meta0, file, 16, 2, 358);
			attr_dev(meta1, "name", "googlebot");
			attr_dev(meta1, "content", meta1_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`);
			add_location(meta1, file, 19, 2, 472);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(document.head, null);
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			if (if_block1) if_block1.m(document.head, null);
			append_dev(document.head, if_block1_anchor);
			if (if_block2) if_block2.m(document.head, null);
			append_dev(document.head, if_block2_anchor);
			if (if_block3) if_block3.m(document.head, null);
			append_dev(document.head, if_block3_anchor);
			if (if_block4) if_block4.m(document.head, null);
			append_dev(document.head, if_block4_anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_24(ctx);
					if_block0.c();
					if_block0.m(meta0.parentNode, meta0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*noindex, nofollow*/ 6 && meta0_content_value !== (meta0_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`)) {
				attr_dev(meta0, "content", meta0_content_value);
			}

			if (dirty & /*noindex, nofollow*/ 6 && meta1_content_value !== (meta1_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`)) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if (/*description*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_23(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*keywords*/ ctx[4]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_22(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*openGraph*/ ctx[6]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_6(ctx);
					if_block3.c();
					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*twitter*/ ctx[7]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block(ctx);
					if_block4.c();
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			detach_dev(meta0);
			detach_dev(meta1);
			if (if_block1) if_block1.d(detaching);
			detach_dev(if_block1_anchor);
			if (if_block2) if_block2.d(detaching);
			detach_dev(if_block2_anchor);
			if (if_block3) if_block3.d(detaching);
			detach_dev(if_block3_anchor);
			if (if_block4) if_block4.d(detaching);
			detach_dev(if_block4_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SvelteSeo", slots, []);
	let { title = undefined } = $$props;
	let { noindex = false } = $$props;
	let { nofollow = false } = $$props;
	let { description = undefined } = $$props;
	let { keywords = undefined } = $$props;
	let { canonical = undefined } = $$props;
	let { openGraph = undefined } = $$props;
	let { twitter = undefined } = $$props;

	const writable_props = [
		"title",
		"noindex",
		"nofollow",
		"description",
		"keywords",
		"canonical",
		"openGraph",
		"twitter"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvelteSeo> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("noindex" in $$props) $$invalidate(1, noindex = $$props.noindex);
		if ("nofollow" in $$props) $$invalidate(2, nofollow = $$props.nofollow);
		if ("description" in $$props) $$invalidate(3, description = $$props.description);
		if ("keywords" in $$props) $$invalidate(4, keywords = $$props.keywords);
		if ("canonical" in $$props) $$invalidate(5, canonical = $$props.canonical);
		if ("openGraph" in $$props) $$invalidate(6, openGraph = $$props.openGraph);
		if ("twitter" in $$props) $$invalidate(7, twitter = $$props.twitter);
	};

	$$self.$capture_state = () => ({
		title,
		noindex,
		nofollow,
		description,
		keywords,
		canonical,
		openGraph,
		twitter
	});

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("noindex" in $$props) $$invalidate(1, noindex = $$props.noindex);
		if ("nofollow" in $$props) $$invalidate(2, nofollow = $$props.nofollow);
		if ("description" in $$props) $$invalidate(3, description = $$props.description);
		if ("keywords" in $$props) $$invalidate(4, keywords = $$props.keywords);
		if ("canonical" in $$props) $$invalidate(5, canonical = $$props.canonical);
		if ("openGraph" in $$props) $$invalidate(6, openGraph = $$props.openGraph);
		if ("twitter" in $$props) $$invalidate(7, twitter = $$props.twitter);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [title, noindex, nofollow, description, keywords, canonical, openGraph, twitter];
}

class SvelteSeo extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			noindex: 1,
			nofollow: 2,
			description: 3,
			keywords: 4,
			canonical: 5,
			openGraph: 6,
			twitter: 7
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SvelteSeo",
			options,
			id: create_fragment.name
		});
	}

	get title() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noindex() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noindex(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nofollow() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nofollow(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get description() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set description(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get keywords() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set keywords(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get canonical() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set canonical(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get openGraph() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set openGraph(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get twitter() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set twitter(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export { SvelteSeo as S };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
