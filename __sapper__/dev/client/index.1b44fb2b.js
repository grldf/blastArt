import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_each_argument, a as validate_slots, c as create_component, b as claim_component, m as mount_component, t as transition_in, e as transition_out, f as destroy_component, g as element, h as space, j as text, k as claim_element, l as children, n as detach_dev, o as claim_space, p as claim_text, q as attr_dev, r as add_location, u as insert_dev, w as append_dev, x as listen_dev, y as check_outros, z as destroy_each, A as run_all, B as group_outros } from './client.e23f01ee.js';
import Slide from '';
import { g as gql, D as DefaultClient } from './bundle.esm.ce987c6b.js';

/* src/routes/index.svelte generated by Svelte v3.35.0 */
const file = "src/routes/index.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (55:0) {#each presentation as post}
function create_each_block(ctx) {
	let slide;
	let current;

	slide = new Slide({
			props: {
				imageUrl: urlpApi + /*post*/ ctx[4].cover.url,
				alternText: /*post*/ ctx[4].titre,
				slideNo: /*imageShowIndex*/ ctx[1],
				totalSlide: /*presentation*/ ctx[0].length,
				imageShowing: /*post*/ ctx[4].idP * -1 + /*presentation*/ ctx[0].length + 1 === /*imageShowIndex*/ ctx[1],
				infos: /*post*/ ctx[4].titre,
				slug: urlSlug + /*post*/ ctx[4].Slug
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(slide.$$.fragment);
		},
		l: function claim(nodes) {
			claim_component(slide.$$.fragment, nodes);
		},
		m: function mount(target, anchor) {
			mount_component(slide, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const slide_changes = {};
			if (dirty & /*presentation*/ 1) slide_changes.imageUrl = urlpApi + /*post*/ ctx[4].cover.url;
			if (dirty & /*presentation*/ 1) slide_changes.alternText = /*post*/ ctx[4].titre;
			if (dirty & /*imageShowIndex*/ 2) slide_changes.slideNo = /*imageShowIndex*/ ctx[1];
			if (dirty & /*presentation*/ 1) slide_changes.totalSlide = /*presentation*/ ctx[0].length;
			if (dirty & /*presentation, imageShowIndex*/ 3) slide_changes.imageShowing = /*post*/ ctx[4].idP * -1 + /*presentation*/ ctx[0].length + 1 === /*imageShowIndex*/ ctx[1];
			if (dirty & /*presentation*/ 1) slide_changes.infos = /*post*/ ctx[4].titre;
			if (dirty & /*presentation*/ 1) slide_changes.slug = urlSlug + /*post*/ ctx[4].Slug;
			slide.$set(slide_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(slide.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(slide.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(slide, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(55:0) {#each presentation as post}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t0;
	let a0;
	let t1;
	let t2;
	let a1;
	let t3;
	let current;
	let mounted;
	let dispose;
	let each_value = /*presentation*/ ctx[0];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			a0 = element("a");
			t1 = text("❮");
			t2 = space();
			a1 = element("a");
			t3 = text("❯");
			this.h();
		},
		l: function claim(nodes) {
			div1 = claim_element(nodes, "DIV", {});
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div0_nodes);
			}

			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			a0 = claim_element(div1_nodes, "A", { href: true, class: true });
			var a0_nodes = children(a0);
			t1 = claim_text(a0_nodes, "❮");
			a0_nodes.forEach(detach_dev);
			t2 = claim_space(div1_nodes);
			a1 = claim_element(div1_nodes, "A", { href: true, class: true });
			var a1_nodes = children(a1);
			t3 = claim_text(a1_nodes, "❯");
			a1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "container svelte-1mpw5tt");
			add_location(div0, file, 53, 0, 1058);
			attr_dev(a0, "href", "#arrowL");
			attr_dev(a0, "class", "prev svelte-1mpw5tt");
			add_location(a0, file, 66, 0, 1484);
			attr_dev(a1, "href", "#arrowR");
			attr_dev(a1, "class", "next svelte-1mpw5tt");
			add_location(a1, file, 67, 0, 1549);
			add_location(div1, file, 52, 0, 1052);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div0, null);
			}

			append_dev(div1, t0);
			append_dev(div1, a0);
			append_dev(a0, t1);
			append_dev(div1, t2);
			append_dev(div1, a1);
			append_dev(a1, t3);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(a0, "click", /*prevSlide*/ ctx[2], false, false, false),
					listen_dev(a1, "click", /*nextSlide*/ ctx[3], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*urlpApi, presentation, imageShowIndex, urlSlug*/ 3) {
				each_value = /*presentation*/ ctx[0];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div0, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o: function outro(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const imageQuery = gql`
   query cover{
     projets(sort:"date:desc"){
       id
       idP
       titre
       cover {
         url
       }
       Slug
     }
   }
 `;

async function preload() {
	const client = new DefaultClient({
			uri: "https://grldfaure.xyz/graphql",
			fetch: this.fetch
		});

	const results = await client.query({ query: imageQuery });
	return { presentation: results.data.projets };
}

const urlpApi = "https://grldfaure.xyz";
const urlSlug = "projet/";

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	let { presentation } = $$props;

	// slideshow change image	
	let imageShowIndex = 1;

	const prevSlide = () => {
		if (imageShowIndex === 1) {
			$$invalidate(1, imageShowIndex = presentation.length);
		} else {
			$$invalidate(1, imageShowIndex -= 1);
		}
	};

	const nextSlide = () => {
		if (imageShowIndex === presentation.length) {
			$$invalidate(1, imageShowIndex = 1);
		} else {
			$$invalidate(1, imageShowIndex += 1);
		}
	};

	const writable_props = ["presentation"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("presentation" in $$props) $$invalidate(0, presentation = $$props.presentation);
	};

	$$self.$capture_state = () => ({
		ApolloClient: DefaultClient,
		gql,
		Slide,
		imageQuery,
		preload,
		urlpApi,
		urlSlug,
		presentation,
		imageShowIndex,
		prevSlide,
		nextSlide
	});

	$$self.$inject_state = $$props => {
		if ("presentation" in $$props) $$invalidate(0, presentation = $$props.presentation);
		if ("imageShowIndex" in $$props) $$invalidate(1, imageShowIndex = $$props.imageShowIndex);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [presentation, imageShowIndex, prevSlide, nextSlide];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { presentation: 0 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*presentation*/ ctx[0] === undefined && !("presentation" in props)) {
			console.warn("<Routes> was created without expected prop 'presentation'");
		}
	}

	get presentation() {
		throw new Error("<Routes>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set presentation(value) {
		throw new Error("<Routes>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Routes;
export { preload };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguMWI0NGZiMmIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzY3JpcHQgY29udGV4dD1cIm1vZHVsZVwiPlxuICAgIGltcG9ydCBBcG9sbG9DbGllbnQsIHsgZ3FsIH0gZnJvbSBcImFwb2xsby1ib29zdFwiO1xuICAgIGltcG9ydCBTbGlkZSBmcm9tIFwiXCI7XG4gY29uc3QgaW1hZ2VRdWVyeSA9IGdxbGBcbiAgIHF1ZXJ5IGNvdmVye1xuICAgICBwcm9qZXRzKHNvcnQ6XCJkYXRlOmRlc2NcIil7XG4gICAgICAgaWRcbiAgICAgICBpZFBcbiAgICAgICB0aXRyZVxuICAgICAgIGNvdmVyIHtcbiAgICAgICAgIHVybFxuICAgICAgIH1cbiAgICAgICBTbHVnXG4gICAgIH1cbiAgIH1cbiBgO1xuIGV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVsb2FkKCkge1xuICAgY29uc3QgY2xpZW50ID0gbmV3IEFwb2xsb0NsaWVudCh7XG4gICAgIHVyaTogXCJodHRwczovL2dybGRmYXVyZS54eXovZ3JhcGhxbFwiLFxuICAgICAgIGZldGNoOiB0aGlzLmZldGNoLFxuICAgfSk7XG4gICBjb25zdCByZXN1bHRzID0gYXdhaXQgY2xpZW50LnF1ZXJ5KHtcbiAgICAgcXVlcnk6IGltYWdlUXVlcnksXG4gICB9KTtcbiAgIHJldHVybiB7IHByZXNlbnRhdGlvbjogcmVzdWx0cy5kYXRhLnByb2pldHMgfTtcbn1cblxuIGNvbnN0IHVybHBBcGkgPSBcImh0dHBzOi8vZ3JsZGZhdXJlLnh5elwiO1xuIGNvbnN0IHVybFNsdWcgPSBcInByb2pldC9cIjtcbiAgIFxuPC9zY3JpcHQ+XG5cbjxzY3JpcHQ+XG4gICBleHBvcnQgbGV0IHByZXNlbnRhdGlvbjtcbi8vIHNsaWRlc2hvdyBjaGFuZ2UgaW1hZ2VcdFxubGV0IGltYWdlU2hvd0luZGV4ID0gMTtcbiBjb25zdCBwcmV2U2xpZGUgPSAoKSA9PiB7XG4gICAgIGlmKGltYWdlU2hvd0luZGV4ID09PSAxICl7XG4gICAgICAgIGltYWdlU2hvd0luZGV4ID0gcHJlc2VudGF0aW9uLmxlbmd0aDtcbiAgICAgfWVsc2V7XG4gICAgICAgaW1hZ2VTaG93SW5kZXggLT0gMTtcbiAgICAgfVxuICAgfTtcbiBcbiBjb25zdCBuZXh0U2xpZGUgPSAoKSA9PiB7XG4gICAgIGlmIChpbWFnZVNob3dJbmRleCA9PT0gcHJlc2VudGF0aW9uLmxlbmd0aCl7XG4gICAgICAgICBpbWFnZVNob3dJbmRleCA9IDFcbiAgICAgfWVsc2V7XG4gICAgICAgaW1hZ2VTaG93SW5kZXggKz0gMTtcbiAgICAgfVxuICAgfSA7XG48L3NjcmlwdD5cbjxkaXY+XG48ZGl2IGNsYXNzPVwiY29udGFpbmVyXCI+XG57I2VhY2ggcHJlc2VudGF0aW9uIGFzIHBvc3R9XG4gPFNsaWRlIGltYWdlVXJsPXt1cmxwQXBpICsgcG9zdC5jb3Zlci51cmx9IFxuICAgICAgICAgIGFsdGVyblRleHQ9e3Bvc3QudGl0cmV9IFxuICAgICAgICAgIHNsaWRlTm89e2ltYWdlU2hvd0luZGV4fVxuICAgICAgICAgIHRvdGFsU2xpZGU9e3ByZXNlbnRhdGlvbi5sZW5ndGh9XG4gICAgICAgICAgaW1hZ2VTaG93aW5nPXsocG9zdC5pZFAgKiAtMSkgKyBwcmVzZW50YXRpb24ubGVuZ3RoICsgMSA9PT0gaW1hZ2VTaG93SW5kZXh9XG4gICAgICAgICAgaW5mb3M9e3Bvc3QudGl0cmV9XG4gICAgICAgICAgc2x1Zz17dXJsU2x1ZyArIHBvc3QuU2x1Z31cbiAgICAgICAgICAvPlxuey9lYWNofVxuPC9kaXY+XG48IS0tIE5leHQgYW5kIHByZXZpb3VzIGJ1dHRvbnMgLS0+XG48YSBocmVmPVwiI2Fycm93TFwiIGNsYXNzPVwicHJldlwiIG9uOmNsaWNrPXtwcmV2U2xpZGV9PiYjMTAwOTQ7PC9hPlxuPGEgaHJlZj1cIiNhcnJvd1JcIiBjbGFzcz1cIm5leHRcIiBvbjpjbGljaz17bmV4dFNsaWRlfT4mIzEwMDk1OzwvYT5cbjwvZGl2PlxuXG48c3R5bGU+XG4uY29udGFpbmVyIHtcbiBwb3NpdGlvbjogcmVsYXRpdmU7XG59XG5cblxuLyogTmV4dCAmIHByZXZpb3VzIGJ1dHRvbnMgKi9cbi5wcmV2LFxuLm5leHQge1xuIGN1cnNvcjogcG9pbnRlcjtcbiBwb3NpdGlvbjogYWJzb2x1dGU7XG4gdG9wOiA0MCU7XG4gd2lkdGg6IGF1dG87XG4gcGFkZGluZzogMjBweDtcbiBtYXJnaW4tbGVmdDogMjBweDtcbiBjb2xvcjogcmdiKDIyOCwgNDYsIDI0NSk7XG4gZm9udC13ZWlnaHQ6IGJvbGQ7XG4gZm9udC1zaXplOiAyNXB4O1xuIGJvcmRlci1yYWRpdXM6IDAgM3B4IDNweCAwO1xuIHVzZXItc2VsZWN0OiBub25lO1xuIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XG59IFxuXG4vKiBQb3NpdGlvbiB0aGUgXCJuZXh0IGJ1dHRvblwiIHRvIHRoZSByaWdodCAqL1xuLm5leHQge1xuIHJpZ2h0OiAwO1xuIG1hcmdpbi1yaWdodDogMjBweDtcbiBib3JkZXItcmFkaXVzOiAzcHggMCAwIDNweDtcbn0gXG5cbi8qIE9uIGhvdmVyLCBhZGQgYSBibGFjayBiYWNrZ3JvdW5kIGNvbG9yIHdpdGggYSBsaXR0bGUgYml0IHNlZS10aHJvdWdoICovXG4ucHJldjpob3Zlcixcbi5uZXh0OmhvdmVyIHtcbiAgIGZvbnQtc2l6ZTogMzBweDtcbn0gXG5AbWVkaWEobWF4LXdpZHRoOjY2MHB4KXtcbiAgICAucHJldntcbiAgICAgICAgbWFyZ2luLWxlZnQ6MHB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwgMCwgMCwgMC4yNjcpO1xuICAgIH1cbiAgICAubmV4dHtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OjBweDtcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjpyZ2JhKDAsIDAsIDAsIDAuMjY3KTtcbiAgICB9XG59XG48L3N0eWxlPiJdLCJuYW1lcyI6WyJBcG9sbG9DbGllbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2NBdURrQixPQUFPLFlBQUcsR0FBSSxJQUFDLEtBQUssQ0FBQyxHQUFHO3lCQUNwQixHQUFJLElBQUMsS0FBSztnQ0FDYixHQUFjO2lDQUNYLEdBQVksSUFBQyxNQUFNOzJCQUNoQixHQUFJLElBQUMsR0FBRyxJQUFJLENBQUMsb0JBQUksR0FBWSxJQUFDLE1BQU0sR0FBRyxDQUFDLHdCQUFLLEdBQWM7b0JBQ25FLEdBQUksSUFBQyxLQUFLO1VBQ1gsT0FBTyxZQUFHLEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7NERBTmpCLE9BQU8sWUFBRyxHQUFJLElBQUMsS0FBSyxDQUFDLEdBQUc7dUVBQ3BCLEdBQUksSUFBQyxLQUFLO2dGQUNiLEdBQWM7K0VBQ1gsR0FBWSxJQUFDLE1BQU07eUZBQ2hCLEdBQUksSUFBQyxHQUFHLElBQUksQ0FBQyxvQkFBSSxHQUFZLElBQUMsTUFBTSxHQUFHLENBQUMsd0JBQUssR0FBYztrRUFDbkUsR0FBSSxJQUFDLEtBQUs7d0RBQ1gsT0FBTyxZQUFHLEdBQUksSUFBQyxJQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O21DQVA1QixHQUFZOzs7O2dDQUFqQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkNBWW1DLEdBQVM7MkNBQ1QsR0FBUzs7Ozs7Ozs7a0NBYjNDLEdBQVk7Ozs7K0JBQWpCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7d0JBQUosTUFBSTs7Ozs7Ozs7OztrQ0FBSixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O01BbkRDLFVBQVUsR0FBRyxHQUFHOzs7Ozs7Ozs7Ozs7OztlQWFBLE9BQU87T0FDckIsTUFBTSxPQUFPQSxhQUFZO0dBQzdCLEdBQUcsRUFBRSwrQkFBK0I7R0FDbEMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLOzs7T0FFZixPQUFPLFNBQVMsTUFBTSxDQUFDLEtBQUssR0FDaEMsS0FBSyxFQUFFLFVBQVU7VUFFVixZQUFZLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPOzs7TUFHdkMsT0FBTyxHQUFHLHVCQUF1QjtNQUNqQyxPQUFPLEdBQUcsU0FBUzs7Ozs7T0FLWixZQUFZOzs7S0FFdEIsY0FBYyxHQUFHLENBQUM7O09BQ2YsU0FBUztNQUNSLGNBQWMsS0FBSyxDQUFDO21CQUNwQixjQUFjLEdBQUcsWUFBWSxDQUFDLE1BQU07O21CQUVyQyxjQUFjLElBQUksQ0FBQzs7OztPQUluQixTQUFTO01BQ1AsY0FBYyxLQUFLLFlBQVksQ0FBQyxNQUFNO21CQUN0QyxjQUFjLEdBQUcsQ0FBQzs7bUJBRXBCLGNBQWMsSUFBSSxDQUFDOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=
